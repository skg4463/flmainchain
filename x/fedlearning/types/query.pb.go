// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flmainchain/fedlearning/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetCurrentRoundRequest defines the QueryGetCurrentRoundRequest message.
type QueryGetCurrentRoundRequest struct {
}

func (m *QueryGetCurrentRoundRequest) Reset()         { *m = QueryGetCurrentRoundRequest{} }
func (m *QueryGetCurrentRoundRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentRoundRequest) ProtoMessage()    {}
func (*QueryGetCurrentRoundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{2}
}
func (m *QueryGetCurrentRoundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentRoundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentRoundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentRoundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentRoundRequest.Merge(m, src)
}
func (m *QueryGetCurrentRoundRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentRoundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentRoundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentRoundRequest proto.InternalMessageInfo

// QueryGetCurrentRoundResponse defines the QueryGetCurrentRoundResponse message.
type QueryGetCurrentRoundResponse struct {
	CurrentRound CurrentRound `protobuf:"bytes,1,opt,name=current_round,json=currentRound,proto3" json:"current_round"`
}

func (m *QueryGetCurrentRoundResponse) Reset()         { *m = QueryGetCurrentRoundResponse{} }
func (m *QueryGetCurrentRoundResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentRoundResponse) ProtoMessage()    {}
func (*QueryGetCurrentRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{3}
}
func (m *QueryGetCurrentRoundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentRoundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentRoundResponse.Merge(m, src)
}
func (m *QueryGetCurrentRoundResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentRoundResponse proto.InternalMessageInfo

func (m *QueryGetCurrentRoundResponse) GetCurrentRound() CurrentRound {
	if m != nil {
		return m.CurrentRound
	}
	return CurrentRound{}
}

// QueryGetRoundRequest defines the QueryGetRoundRequest message.
type QueryGetRoundRequest struct {
	RoundId uint64 `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *QueryGetRoundRequest) Reset()         { *m = QueryGetRoundRequest{} }
func (m *QueryGetRoundRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRoundRequest) ProtoMessage()    {}
func (*QueryGetRoundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{4}
}
func (m *QueryGetRoundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRoundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRoundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRoundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRoundRequest.Merge(m, src)
}
func (m *QueryGetRoundRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRoundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRoundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRoundRequest proto.InternalMessageInfo

func (m *QueryGetRoundRequest) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

// QueryGetRoundResponse defines the QueryGetRoundResponse message.
type QueryGetRoundResponse struct {
	Round Round `protobuf:"bytes,1,opt,name=round,proto3" json:"round"`
}

func (m *QueryGetRoundResponse) Reset()         { *m = QueryGetRoundResponse{} }
func (m *QueryGetRoundResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRoundResponse) ProtoMessage()    {}
func (*QueryGetRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{5}
}
func (m *QueryGetRoundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRoundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRoundResponse.Merge(m, src)
}
func (m *QueryGetRoundResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRoundResponse proto.InternalMessageInfo

func (m *QueryGetRoundResponse) GetRound() Round {
	if m != nil {
		return m.Round
	}
	return Round{}
}

// QueryAllRoundRequest defines the QueryAllRoundRequest message.
type QueryAllRoundRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRoundRequest) Reset()         { *m = QueryAllRoundRequest{} }
func (m *QueryAllRoundRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRoundRequest) ProtoMessage()    {}
func (*QueryAllRoundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{6}
}
func (m *QueryAllRoundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRoundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRoundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRoundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRoundRequest.Merge(m, src)
}
func (m *QueryAllRoundRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRoundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRoundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRoundRequest proto.InternalMessageInfo

func (m *QueryAllRoundRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllRoundResponse defines the QueryAllRoundResponse message.
type QueryAllRoundResponse struct {
	Round      []Round             `protobuf:"bytes,1,rep,name=round,proto3" json:"round"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRoundResponse) Reset()         { *m = QueryAllRoundResponse{} }
func (m *QueryAllRoundResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRoundResponse) ProtoMessage()    {}
func (*QueryAllRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{7}
}
func (m *QueryAllRoundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRoundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRoundResponse.Merge(m, src)
}
func (m *QueryAllRoundResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRoundResponse proto.InternalMessageInfo

func (m *QueryAllRoundResponse) GetRound() []Round {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *QueryAllRoundResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetModelSubmissionRequest defines the QueryGetModelSubmissionRequest message.
type QueryGetModelSubmissionRequest struct {
	OriginalHash string `protobuf:"bytes,1,opt,name=original_hash,json=originalHash,proto3" json:"original_hash,omitempty"`
}

func (m *QueryGetModelSubmissionRequest) Reset()         { *m = QueryGetModelSubmissionRequest{} }
func (m *QueryGetModelSubmissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetModelSubmissionRequest) ProtoMessage()    {}
func (*QueryGetModelSubmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{8}
}
func (m *QueryGetModelSubmissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModelSubmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModelSubmissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModelSubmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModelSubmissionRequest.Merge(m, src)
}
func (m *QueryGetModelSubmissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModelSubmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModelSubmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModelSubmissionRequest proto.InternalMessageInfo

func (m *QueryGetModelSubmissionRequest) GetOriginalHash() string {
	if m != nil {
		return m.OriginalHash
	}
	return ""
}

// QueryGetModelSubmissionResponse defines the QueryGetModelSubmissionResponse message.
type QueryGetModelSubmissionResponse struct {
	ModelSubmission ModelSubmission `protobuf:"bytes,1,opt,name=model_submission,json=modelSubmission,proto3" json:"model_submission"`
}

func (m *QueryGetModelSubmissionResponse) Reset()         { *m = QueryGetModelSubmissionResponse{} }
func (m *QueryGetModelSubmissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetModelSubmissionResponse) ProtoMessage()    {}
func (*QueryGetModelSubmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{9}
}
func (m *QueryGetModelSubmissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModelSubmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModelSubmissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModelSubmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModelSubmissionResponse.Merge(m, src)
}
func (m *QueryGetModelSubmissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModelSubmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModelSubmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModelSubmissionResponse proto.InternalMessageInfo

func (m *QueryGetModelSubmissionResponse) GetModelSubmission() ModelSubmission {
	if m != nil {
		return m.ModelSubmission
	}
	return ModelSubmission{}
}

// QueryAllModelSubmissionRequest defines the QueryAllModelSubmissionRequest message.
type QueryAllModelSubmissionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllModelSubmissionRequest) Reset()         { *m = QueryAllModelSubmissionRequest{} }
func (m *QueryAllModelSubmissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllModelSubmissionRequest) ProtoMessage()    {}
func (*QueryAllModelSubmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{10}
}
func (m *QueryAllModelSubmissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllModelSubmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllModelSubmissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllModelSubmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllModelSubmissionRequest.Merge(m, src)
}
func (m *QueryAllModelSubmissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllModelSubmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllModelSubmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllModelSubmissionRequest proto.InternalMessageInfo

func (m *QueryAllModelSubmissionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllModelSubmissionResponse defines the QueryAllModelSubmissionResponse message.
type QueryAllModelSubmissionResponse struct {
	ModelSubmission []ModelSubmission   `protobuf:"bytes,1,rep,name=model_submission,json=modelSubmission,proto3" json:"model_submission"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllModelSubmissionResponse) Reset()         { *m = QueryAllModelSubmissionResponse{} }
func (m *QueryAllModelSubmissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllModelSubmissionResponse) ProtoMessage()    {}
func (*QueryAllModelSubmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{11}
}
func (m *QueryAllModelSubmissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllModelSubmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllModelSubmissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllModelSubmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllModelSubmissionResponse.Merge(m, src)
}
func (m *QueryAllModelSubmissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllModelSubmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllModelSubmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllModelSubmissionResponse proto.InternalMessageInfo

func (m *QueryAllModelSubmissionResponse) GetModelSubmission() []ModelSubmission {
	if m != nil {
		return m.ModelSubmission
	}
	return nil
}

func (m *QueryAllModelSubmissionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetSubmittedScoreRequest defines the QueryGetSubmittedScoreRequest message.
type QueryGetSubmittedScoreRequest struct {
	ScoreId string `protobuf:"bytes,1,opt,name=score_id,json=scoreId,proto3" json:"score_id,omitempty"`
}

func (m *QueryGetSubmittedScoreRequest) Reset()         { *m = QueryGetSubmittedScoreRequest{} }
func (m *QueryGetSubmittedScoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubmittedScoreRequest) ProtoMessage()    {}
func (*QueryGetSubmittedScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{12}
}
func (m *QueryGetSubmittedScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubmittedScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubmittedScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubmittedScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubmittedScoreRequest.Merge(m, src)
}
func (m *QueryGetSubmittedScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubmittedScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubmittedScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubmittedScoreRequest proto.InternalMessageInfo

func (m *QueryGetSubmittedScoreRequest) GetScoreId() string {
	if m != nil {
		return m.ScoreId
	}
	return ""
}

// QueryGetSubmittedScoreResponse defines the QueryGetSubmittedScoreResponse message.
type QueryGetSubmittedScoreResponse struct {
	SubmittedScore SubmittedScore `protobuf:"bytes,1,opt,name=submitted_score,json=submittedScore,proto3" json:"submitted_score"`
}

func (m *QueryGetSubmittedScoreResponse) Reset()         { *m = QueryGetSubmittedScoreResponse{} }
func (m *QueryGetSubmittedScoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubmittedScoreResponse) ProtoMessage()    {}
func (*QueryGetSubmittedScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{13}
}
func (m *QueryGetSubmittedScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubmittedScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubmittedScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubmittedScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubmittedScoreResponse.Merge(m, src)
}
func (m *QueryGetSubmittedScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubmittedScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubmittedScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubmittedScoreResponse proto.InternalMessageInfo

func (m *QueryGetSubmittedScoreResponse) GetSubmittedScore() SubmittedScore {
	if m != nil {
		return m.SubmittedScore
	}
	return SubmittedScore{}
}

// QueryAllSubmittedScoreRequest defines the QueryAllSubmittedScoreRequest message.
type QueryAllSubmittedScoreRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSubmittedScoreRequest) Reset()         { *m = QueryAllSubmittedScoreRequest{} }
func (m *QueryAllSubmittedScoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSubmittedScoreRequest) ProtoMessage()    {}
func (*QueryAllSubmittedScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{14}
}
func (m *QueryAllSubmittedScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSubmittedScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSubmittedScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSubmittedScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSubmittedScoreRequest.Merge(m, src)
}
func (m *QueryAllSubmittedScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSubmittedScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSubmittedScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSubmittedScoreRequest proto.InternalMessageInfo

func (m *QueryAllSubmittedScoreRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllSubmittedScoreResponse defines the QueryAllSubmittedScoreResponse message.
type QueryAllSubmittedScoreResponse struct {
	SubmittedScore []SubmittedScore    `protobuf:"bytes,1,rep,name=submitted_score,json=submittedScore,proto3" json:"submitted_score"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSubmittedScoreResponse) Reset()         { *m = QueryAllSubmittedScoreResponse{} }
func (m *QueryAllSubmittedScoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSubmittedScoreResponse) ProtoMessage()    {}
func (*QueryAllSubmittedScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{15}
}
func (m *QueryAllSubmittedScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSubmittedScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSubmittedScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSubmittedScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSubmittedScoreResponse.Merge(m, src)
}
func (m *QueryAllSubmittedScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSubmittedScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSubmittedScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSubmittedScoreResponse proto.InternalMessageInfo

func (m *QueryAllSubmittedScoreResponse) GetSubmittedScore() []SubmittedScore {
	if m != nil {
		return m.SubmittedScore
	}
	return nil
}

func (m *QueryAllSubmittedScoreResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetFinalAttRequest defines the QueryGetFinalAttRequest message.
type QueryGetFinalAttRequest struct {
	RoundId uint64 `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *QueryGetFinalAttRequest) Reset()         { *m = QueryGetFinalAttRequest{} }
func (m *QueryGetFinalAttRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFinalAttRequest) ProtoMessage()    {}
func (*QueryGetFinalAttRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{16}
}
func (m *QueryGetFinalAttRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFinalAttRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFinalAttRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFinalAttRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFinalAttRequest.Merge(m, src)
}
func (m *QueryGetFinalAttRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFinalAttRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFinalAttRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFinalAttRequest proto.InternalMessageInfo

func (m *QueryGetFinalAttRequest) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

// QueryGetFinalAttResponse defines the QueryGetFinalAttResponse message.
type QueryGetFinalAttResponse struct {
	FinalAtt FinalAtt `protobuf:"bytes,1,opt,name=final_att,json=finalAtt,proto3" json:"final_att"`
}

func (m *QueryGetFinalAttResponse) Reset()         { *m = QueryGetFinalAttResponse{} }
func (m *QueryGetFinalAttResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFinalAttResponse) ProtoMessage()    {}
func (*QueryGetFinalAttResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{17}
}
func (m *QueryGetFinalAttResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFinalAttResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFinalAttResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFinalAttResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFinalAttResponse.Merge(m, src)
}
func (m *QueryGetFinalAttResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFinalAttResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFinalAttResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFinalAttResponse proto.InternalMessageInfo

func (m *QueryGetFinalAttResponse) GetFinalAtt() FinalAtt {
	if m != nil {
		return m.FinalAtt
	}
	return FinalAtt{}
}

// QueryAllFinalAttRequest defines the QueryAllFinalAttRequest message.
type QueryAllFinalAttRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFinalAttRequest) Reset()         { *m = QueryAllFinalAttRequest{} }
func (m *QueryAllFinalAttRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFinalAttRequest) ProtoMessage()    {}
func (*QueryAllFinalAttRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{18}
}
func (m *QueryAllFinalAttRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFinalAttRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFinalAttRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFinalAttRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFinalAttRequest.Merge(m, src)
}
func (m *QueryAllFinalAttRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFinalAttRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFinalAttRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFinalAttRequest proto.InternalMessageInfo

func (m *QueryAllFinalAttRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllFinalAttResponse defines the QueryAllFinalAttResponse message.
type QueryAllFinalAttResponse struct {
	FinalAtt   []FinalAtt          `protobuf:"bytes,1,rep,name=final_att,json=finalAtt,proto3" json:"final_att"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFinalAttResponse) Reset()         { *m = QueryAllFinalAttResponse{} }
func (m *QueryAllFinalAttResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFinalAttResponse) ProtoMessage()    {}
func (*QueryAllFinalAttResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{19}
}
func (m *QueryAllFinalAttResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFinalAttResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFinalAttResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFinalAttResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFinalAttResponse.Merge(m, src)
}
func (m *QueryAllFinalAttResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFinalAttResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFinalAttResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFinalAttResponse proto.InternalMessageInfo

func (m *QueryAllFinalAttResponse) GetFinalAtt() []FinalAtt {
	if m != nil {
		return m.FinalAtt
	}
	return nil
}

func (m *QueryAllFinalAttResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetGlobalModelRequest defines the QueryGetGlobalModelRequest message.
type QueryGetGlobalModelRequest struct {
	RoundId uint64 `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *QueryGetGlobalModelRequest) Reset()         { *m = QueryGetGlobalModelRequest{} }
func (m *QueryGetGlobalModelRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGlobalModelRequest) ProtoMessage()    {}
func (*QueryGetGlobalModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{20}
}
func (m *QueryGetGlobalModelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGlobalModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGlobalModelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGlobalModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGlobalModelRequest.Merge(m, src)
}
func (m *QueryGetGlobalModelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGlobalModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGlobalModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGlobalModelRequest proto.InternalMessageInfo

func (m *QueryGetGlobalModelRequest) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

// QueryGetGlobalModelResponse defines the QueryGetGlobalModelResponse message.
type QueryGetGlobalModelResponse struct {
	GlobalModel GlobalModel `protobuf:"bytes,1,opt,name=global_model,json=globalModel,proto3" json:"global_model"`
}

func (m *QueryGetGlobalModelResponse) Reset()         { *m = QueryGetGlobalModelResponse{} }
func (m *QueryGetGlobalModelResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGlobalModelResponse) ProtoMessage()    {}
func (*QueryGetGlobalModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{21}
}
func (m *QueryGetGlobalModelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGlobalModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGlobalModelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGlobalModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGlobalModelResponse.Merge(m, src)
}
func (m *QueryGetGlobalModelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGlobalModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGlobalModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGlobalModelResponse proto.InternalMessageInfo

func (m *QueryGetGlobalModelResponse) GetGlobalModel() GlobalModel {
	if m != nil {
		return m.GlobalModel
	}
	return GlobalModel{}
}

// QueryAllGlobalModelRequest defines the QueryAllGlobalModelRequest message.
type QueryAllGlobalModelRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGlobalModelRequest) Reset()         { *m = QueryAllGlobalModelRequest{} }
func (m *QueryAllGlobalModelRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGlobalModelRequest) ProtoMessage()    {}
func (*QueryAllGlobalModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{22}
}
func (m *QueryAllGlobalModelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGlobalModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGlobalModelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGlobalModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGlobalModelRequest.Merge(m, src)
}
func (m *QueryAllGlobalModelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGlobalModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGlobalModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGlobalModelRequest proto.InternalMessageInfo

func (m *QueryAllGlobalModelRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllGlobalModelResponse defines the QueryAllGlobalModelResponse message.
type QueryAllGlobalModelResponse struct {
	GlobalModel []GlobalModel       `protobuf:"bytes,1,rep,name=global_model,json=globalModel,proto3" json:"global_model"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGlobalModelResponse) Reset()         { *m = QueryAllGlobalModelResponse{} }
func (m *QueryAllGlobalModelResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGlobalModelResponse) ProtoMessage()    {}
func (*QueryAllGlobalModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{23}
}
func (m *QueryAllGlobalModelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGlobalModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGlobalModelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGlobalModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGlobalModelResponse.Merge(m, src)
}
func (m *QueryAllGlobalModelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGlobalModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGlobalModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGlobalModelResponse proto.InternalMessageInfo

func (m *QueryAllGlobalModelResponse) GetGlobalModel() []GlobalModel {
	if m != nil {
		return m.GlobalModel
	}
	return nil
}

func (m *QueryAllGlobalModelResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetRoundCommitteeRequest defines the QueryGetRoundCommitteeRequest message.
type QueryGetRoundCommitteeRequest struct {
	RoundId uint64 `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *QueryGetRoundCommitteeRequest) Reset()         { *m = QueryGetRoundCommitteeRequest{} }
func (m *QueryGetRoundCommitteeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRoundCommitteeRequest) ProtoMessage()    {}
func (*QueryGetRoundCommitteeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{24}
}
func (m *QueryGetRoundCommitteeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRoundCommitteeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRoundCommitteeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRoundCommitteeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRoundCommitteeRequest.Merge(m, src)
}
func (m *QueryGetRoundCommitteeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRoundCommitteeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRoundCommitteeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRoundCommitteeRequest proto.InternalMessageInfo

func (m *QueryGetRoundCommitteeRequest) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

// QueryGetRoundCommitteeResponse defines the QueryGetRoundCommitteeResponse message.
type QueryGetRoundCommitteeResponse struct {
	RoundCommittee RoundCommittee `protobuf:"bytes,1,opt,name=round_committee,json=roundCommittee,proto3" json:"round_committee"`
}

func (m *QueryGetRoundCommitteeResponse) Reset()         { *m = QueryGetRoundCommitteeResponse{} }
func (m *QueryGetRoundCommitteeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRoundCommitteeResponse) ProtoMessage()    {}
func (*QueryGetRoundCommitteeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{25}
}
func (m *QueryGetRoundCommitteeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRoundCommitteeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRoundCommitteeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRoundCommitteeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRoundCommitteeResponse.Merge(m, src)
}
func (m *QueryGetRoundCommitteeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRoundCommitteeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRoundCommitteeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRoundCommitteeResponse proto.InternalMessageInfo

func (m *QueryGetRoundCommitteeResponse) GetRoundCommittee() RoundCommittee {
	if m != nil {
		return m.RoundCommittee
	}
	return RoundCommittee{}
}

// QueryAllRoundCommitteeRequest defines the QueryAllRoundCommitteeRequest message.
type QueryAllRoundCommitteeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRoundCommitteeRequest) Reset()         { *m = QueryAllRoundCommitteeRequest{} }
func (m *QueryAllRoundCommitteeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRoundCommitteeRequest) ProtoMessage()    {}
func (*QueryAllRoundCommitteeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{26}
}
func (m *QueryAllRoundCommitteeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRoundCommitteeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRoundCommitteeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRoundCommitteeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRoundCommitteeRequest.Merge(m, src)
}
func (m *QueryAllRoundCommitteeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRoundCommitteeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRoundCommitteeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRoundCommitteeRequest proto.InternalMessageInfo

func (m *QueryAllRoundCommitteeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllRoundCommitteeResponse defines the QueryAllRoundCommitteeResponse message.
type QueryAllRoundCommitteeResponse struct {
	RoundCommittee []RoundCommittee    `protobuf:"bytes,1,rep,name=round_committee,json=roundCommittee,proto3" json:"round_committee"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRoundCommitteeResponse) Reset()         { *m = QueryAllRoundCommitteeResponse{} }
func (m *QueryAllRoundCommitteeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRoundCommitteeResponse) ProtoMessage()    {}
func (*QueryAllRoundCommitteeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9a45569fbd561b, []int{27}
}
func (m *QueryAllRoundCommitteeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRoundCommitteeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRoundCommitteeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRoundCommitteeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRoundCommitteeResponse.Merge(m, src)
}
func (m *QueryAllRoundCommitteeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRoundCommitteeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRoundCommitteeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRoundCommitteeResponse proto.InternalMessageInfo

func (m *QueryAllRoundCommitteeResponse) GetRoundCommittee() []RoundCommittee {
	if m != nil {
		return m.RoundCommittee
	}
	return nil
}

func (m *QueryAllRoundCommitteeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "flmainchain.fedlearning.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "flmainchain.fedlearning.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetCurrentRoundRequest)(nil), "flmainchain.fedlearning.v1.QueryGetCurrentRoundRequest")
	proto.RegisterType((*QueryGetCurrentRoundResponse)(nil), "flmainchain.fedlearning.v1.QueryGetCurrentRoundResponse")
	proto.RegisterType((*QueryGetRoundRequest)(nil), "flmainchain.fedlearning.v1.QueryGetRoundRequest")
	proto.RegisterType((*QueryGetRoundResponse)(nil), "flmainchain.fedlearning.v1.QueryGetRoundResponse")
	proto.RegisterType((*QueryAllRoundRequest)(nil), "flmainchain.fedlearning.v1.QueryAllRoundRequest")
	proto.RegisterType((*QueryAllRoundResponse)(nil), "flmainchain.fedlearning.v1.QueryAllRoundResponse")
	proto.RegisterType((*QueryGetModelSubmissionRequest)(nil), "flmainchain.fedlearning.v1.QueryGetModelSubmissionRequest")
	proto.RegisterType((*QueryGetModelSubmissionResponse)(nil), "flmainchain.fedlearning.v1.QueryGetModelSubmissionResponse")
	proto.RegisterType((*QueryAllModelSubmissionRequest)(nil), "flmainchain.fedlearning.v1.QueryAllModelSubmissionRequest")
	proto.RegisterType((*QueryAllModelSubmissionResponse)(nil), "flmainchain.fedlearning.v1.QueryAllModelSubmissionResponse")
	proto.RegisterType((*QueryGetSubmittedScoreRequest)(nil), "flmainchain.fedlearning.v1.QueryGetSubmittedScoreRequest")
	proto.RegisterType((*QueryGetSubmittedScoreResponse)(nil), "flmainchain.fedlearning.v1.QueryGetSubmittedScoreResponse")
	proto.RegisterType((*QueryAllSubmittedScoreRequest)(nil), "flmainchain.fedlearning.v1.QueryAllSubmittedScoreRequest")
	proto.RegisterType((*QueryAllSubmittedScoreResponse)(nil), "flmainchain.fedlearning.v1.QueryAllSubmittedScoreResponse")
	proto.RegisterType((*QueryGetFinalAttRequest)(nil), "flmainchain.fedlearning.v1.QueryGetFinalAttRequest")
	proto.RegisterType((*QueryGetFinalAttResponse)(nil), "flmainchain.fedlearning.v1.QueryGetFinalAttResponse")
	proto.RegisterType((*QueryAllFinalAttRequest)(nil), "flmainchain.fedlearning.v1.QueryAllFinalAttRequest")
	proto.RegisterType((*QueryAllFinalAttResponse)(nil), "flmainchain.fedlearning.v1.QueryAllFinalAttResponse")
	proto.RegisterType((*QueryGetGlobalModelRequest)(nil), "flmainchain.fedlearning.v1.QueryGetGlobalModelRequest")
	proto.RegisterType((*QueryGetGlobalModelResponse)(nil), "flmainchain.fedlearning.v1.QueryGetGlobalModelResponse")
	proto.RegisterType((*QueryAllGlobalModelRequest)(nil), "flmainchain.fedlearning.v1.QueryAllGlobalModelRequest")
	proto.RegisterType((*QueryAllGlobalModelResponse)(nil), "flmainchain.fedlearning.v1.QueryAllGlobalModelResponse")
	proto.RegisterType((*QueryGetRoundCommitteeRequest)(nil), "flmainchain.fedlearning.v1.QueryGetRoundCommitteeRequest")
	proto.RegisterType((*QueryGetRoundCommitteeResponse)(nil), "flmainchain.fedlearning.v1.QueryGetRoundCommitteeResponse")
	proto.RegisterType((*QueryAllRoundCommitteeRequest)(nil), "flmainchain.fedlearning.v1.QueryAllRoundCommitteeRequest")
	proto.RegisterType((*QueryAllRoundCommitteeResponse)(nil), "flmainchain.fedlearning.v1.QueryAllRoundCommitteeResponse")
}

func init() {
	proto.RegisterFile("flmainchain/fedlearning/v1/query.proto", fileDescriptor_7d9a45569fbd561b)
}

var fileDescriptor_7d9a45569fbd561b = []byte{
	// 1277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x33, 0xdd, 0x36, 0x4d, 0x26, 0x69, 0x43, 0xa7, 0x41, 0x14, 0xd3, 0x6e, 0xa8, 0x5b,
	0x9a, 0x74, 0x43, 0x3c, 0xd9, 0x24, 0x34, 0x69, 0x0a, 0x95, 0x36, 0xa5, 0x0d, 0x95, 0x40, 0x0a,
	0x1b, 0x09, 0x09, 0x54, 0xb1, 0xf2, 0xee, 0x3a, 0x5e, 0x4b, 0x5e, 0x7b, 0x6b, 0x7b, 0x23, 0xaa,
	0x28, 0x42, 0xe2, 0x13, 0x20, 0x21, 0x4e, 0x1c, 0x38, 0x21, 0xf5, 0xc0, 0x01, 0xa1, 0x4a, 0x70,
	0x42, 0x1c, 0x7a, 0x88, 0x38, 0x55, 0xea, 0x85, 0x13, 0x42, 0x09, 0x12, 0x5f, 0x03, 0x79, 0xfc,
	0xa6, 0x6b, 0x7b, 0xbd, 0xde, 0x71, 0x70, 0x2f, 0xd1, 0xee, 0x64, 0xde, 0xcc, 0xef, 0xff, 0x9e,
	0xe7, 0xed, 0x7f, 0x8c, 0xaf, 0xed, 0x98, 0x6d, 0xd5, 0xb0, 0x1a, 0x2d, 0xd5, 0xb0, 0xe8, 0x8e,
	0xd6, 0x34, 0x35, 0xd5, 0xb1, 0x0c, 0x4b, 0xa7, 0xbb, 0x65, 0xfa, 0xb0, 0xab, 0x39, 0x8f, 0x94,
	0x8e, 0x63, 0x7b, 0x36, 0x91, 0x42, 0xf3, 0x94, 0xd0, 0x3c, 0x65, 0xb7, 0x2c, 0x9d, 0x53, 0xdb,
	0x86, 0x65, 0x53, 0xf6, 0x37, 0x98, 0x2e, 0x95, 0x1a, 0xb6, 0xdb, 0xb6, 0x5d, 0x5a, 0x57, 0x5d,
	0x2d, 0x58, 0x87, 0xee, 0x96, 0xeb, 0x9a, 0xa7, 0x96, 0x69, 0x47, 0xd5, 0x0d, 0x4b, 0xf5, 0x0c,
	0xdb, 0x82, 0xb9, 0x4a, 0x0a, 0x42, 0xa3, 0xeb, 0x38, 0x9a, 0xe5, 0xd5, 0x1c, 0xbb, 0x6b, 0x35,
	0xf9, 0xda, 0x29, 0xf3, 0x77, 0x0c, 0x4b, 0x35, 0x6b, 0xaa, 0xe7, 0xc1, 0xdc, 0x85, 0x94, 0xb9,
	0xba, 0x69, 0xd7, 0x55, 0xb3, 0xd6, 0xb6, 0x9b, 0x9a, 0x09, 0xd3, 0xcb, 0x29, 0xd3, 0xd9, 0xbc,
	0x9a, 0xdb, 0xad, 0xb7, 0x0d, 0xd7, 0xed, 0xd1, 0xcf, 0xa6, 0x84, 0x74, 0x54, 0x47, 0x6d, 0xbb,
	0x30, 0x31, 0x2d, 0xd3, 0x61, 0x79, 0x8b, 0xc3, 0xe6, 0xd5, 0x1a, 0x76, 0xbb, 0x6d, 0x78, 0x9e,
	0xa6, 0x09, 0x44, 0x30, 0x5e, 0xcf, 0xd3, 0x9a, 0x35, 0xb7, 0x61, 0x3b, 0x3c, 0x62, 0x5a, 0xb7,
	0x75, 0x9b, 0x7d, 0xa4, 0xfe, 0x27, 0x18, 0xbd, 0xa8, 0xdb, 0xb6, 0x6e, 0x6a, 0x54, 0xed, 0x18,
	0x54, 0xb5, 0x2c, 0xdb, 0x63, 0x55, 0x02, 0x7e, 0x79, 0x1a, 0x93, 0x8f, 0xfd, 0x42, 0x6e, 0x31,
	0x51, 0x55, 0xed, 0x61, 0x57, 0x73, 0x3d, 0xf9, 0x01, 0x3e, 0x1f, 0x19, 0x75, 0x3b, 0xb6, 0xe5,
	0x6a, 0xe4, 0x2e, 0x1e, 0x0d, 0xc4, 0x5f, 0x40, 0x6f, 0xa2, 0xb9, 0x89, 0x25, 0x59, 0x19, 0xfc,
	0xfc, 0x28, 0x41, 0xec, 0xc6, 0xf8, 0xc1, 0x5f, 0x33, 0x23, 0x8f, 0xff, 0xfd, 0xa9, 0x84, 0xaa,
	0x10, 0x2c, 0x5f, 0xc2, 0x6f, 0xb0, 0xd5, 0x37, 0x35, 0xef, 0x4e, 0xf0, 0x24, 0x54, 0xfd, 0x0c,
	0xf0, 0xcd, 0x5d, 0x7c, 0x31, 0xf9, 0xdf, 0x40, 0xb1, 0x8d, 0xcf, 0x44, 0x1e, 0x20, 0x80, 0x99,
	0x4b, 0x83, 0x09, 0x2f, 0xb4, 0x71, 0xd2, 0x47, 0xaa, 0x4e, 0x36, 0x42, 0x63, 0x72, 0x19, 0x4f,
	0xf3, 0x4d, 0xc3, 0x30, 0xe4, 0x75, 0x3c, 0x16, 0x94, 0xc7, 0x08, 0xf6, 0x39, 0x59, 0x3d, 0xcd,
	0xbe, 0xdf, 0x6f, 0xca, 0x9f, 0xe0, 0x57, 0x63, 0x21, 0x00, 0xf8, 0x1e, 0x3e, 0x15, 0x06, 0xbb,
	0x9c, 0x06, 0x16, 0x26, 0x0a, 0xa2, 0xe4, 0xcf, 0x01, 0xa5, 0x62, 0x9a, 0x11, 0x94, 0x7b, 0x18,
	0xf7, 0x4e, 0x19, 0xac, 0x7d, 0x4d, 0x09, 0x8e, 0xa4, 0xe2, 0x1f, 0x49, 0x25, 0x38, 0xda, 0x70,
	0x24, 0x95, 0x2d, 0x55, 0xd7, 0x20, 0xb6, 0x1a, 0x8a, 0x94, 0xbf, 0x47, 0x00, 0xde, 0xdb, 0xa0,
	0x1f, 0xbc, 0x90, 0x1d, 0x9c, 0x6c, 0x46, 0x00, 0x4f, 0x30, 0xc0, 0xd9, 0xa1, 0x80, 0xc1, 0xde,
	0x11, 0xc2, 0xbb, 0xb8, 0xc8, 0x33, 0xfb, 0x91, 0x7f, 0x3e, 0xb7, 0x5f, 0x1c, 0x4f, 0x9e, 0x8b,
	0x2b, 0xf8, 0x8c, 0xed, 0x18, 0x3a, 0xeb, 0x0b, 0x2d, 0xd5, 0x6d, 0xb1, 0x74, 0x8c, 0x57, 0x27,
	0xf9, 0xe0, 0x07, 0xaa, 0xdb, 0x92, 0xbf, 0xc4, 0x33, 0x03, 0x97, 0x01, 0xc5, 0x0f, 0xf0, 0x2b,
	0xf1, 0x0e, 0x00, 0x99, 0x9d, 0x4f, 0x13, 0x1f, 0x5b, 0x0e, 0xd2, 0x30, 0xd5, 0x8e, 0x0e, 0xcb,
	0x2d, 0xd0, 0x51, 0x31, 0xcd, 0x01, 0x3a, 0xf2, 0xaa, 0xe9, 0x01, 0x02, 0xad, 0x49, 0x5b, 0xa5,
	0x6a, 0x2d, 0xe4, 0xa3, 0x35, 0xbf, 0xe2, 0xaf, 0xe3, 0x4b, 0xbc, 0x6a, 0xdb, 0xbc, 0xcd, 0x6d,
	0xfb, 0x5d, 0x2e, 0x74, 0x24, 0x59, 0xd7, 0xe3, 0x47, 0x72, 0xbc, 0x7a, 0x9a, 0x7d, 0xbf, 0xdf,
	0x94, 0xf7, 0x7a, 0x0f, 0x4e, 0x3c, 0x16, 0x92, 0xf0, 0x29, 0x9e, 0x8a, 0x35, 0x4f, 0xc8, 0x7a,
	0x29, 0x2d, 0x07, 0xd1, 0xc5, 0x20, 0x05, 0x67, 0xdd, 0xc8, 0xa8, 0xac, 0x03, 0x78, 0xc5, 0x34,
	0x93, 0xc1, 0xf3, 0x2a, 0xf6, 0x53, 0xd4, 0x7b, 0xae, 0xb2, 0xc8, 0x2c, 0xe4, 0x21, 0x33, 0xbf,
	0x42, 0xaf, 0xe0, 0xd7, 0x78, 0xb1, 0xee, 0xf9, 0x67, 0xb6, 0xe2, 0x79, 0x02, 0x5d, 0xb7, 0x81,
	0x2f, 0xf4, 0x47, 0x81, 0xea, 0x4d, 0x3c, 0xfe, 0xc2, 0x2a, 0x40, 0x7e, 0xaf, 0xa6, 0xe9, 0xe5,
	0x0b, 0x80, 0xd2, 0xb1, 0x1d, 0xf8, 0x2e, 0xab, 0x80, 0x56, 0x31, 0xcd, 0x38, 0x5a, 0x5e, 0x45,
	0xfc, 0x11, 0x81, 0x90, 0xc8, 0x1e, 0xc9, 0x42, 0x0a, 0xc7, 0x15, 0x92, 0x5f, 0xb1, 0x56, 0xb1,
	0xc4, 0xd3, 0xbe, 0xc9, 0x1c, 0x16, 0x6b, 0x0b, 0x02, 0xf5, 0xb2, 0x7b, 0x3f, 0xf6, 0x91, 0x40,
	0x50, 0xba, 0x85, 0x27, 0xc3, 0x8e, 0x0d, 0x12, 0x3a, 0x9b, 0x26, 0x36, 0xb4, 0x0c, 0xe8, 0x9d,
	0xd0, 0x7b, 0x43, 0x72, 0x13, 0x48, 0x2b, 0xa6, 0x99, 0x40, 0x9a, 0x57, 0xf9, 0x7e, 0x45, 0xa0,
	0x2b, 0xbe, 0xcd, 0x40, 0x5d, 0x85, 0xff, 0xa7, 0xeb, 0xa5, 0x34, 0x58, 0xf6, 0x23, 0x7e, 0x87,
	0x1b, 0x4f, 0x81, 0x6a, 0x86, 0x1a, 0x6c, 0x3c, 0xb6, 0xd7, 0x79, 0x62, 0x7e, 0x56, 0xa4, 0xc1,
	0x46, 0x17, 0xe3, 0x9d, 0xc7, 0x89, 0x8c, 0x86, 0x1b, 0x6c, 0x32, 0xf8, 0xcb, 0x68, 0xb0, 0x59,
	0x64, 0x16, 0xf2, 0x90, 0x99, 0x5b, 0xa1, 0x97, 0x9e, 0x4c, 0xe3, 0x53, 0x4c, 0x06, 0xf9, 0x16,
	0xe1, 0xd1, 0xc0, 0x8f, 0x13, 0x25, 0x8d, 0xaf, 0xff, 0x2a, 0x20, 0x51, 0xe1, 0xf9, 0x01, 0x81,
	0x5c, 0xfa, 0xea, 0xf9, 0x3f, 0xdf, 0x9c, 0xb8, 0x4a, 0x64, 0x3a, 0xf4, 0x0e, 0x45, 0x7e, 0x41,
	0x78, 0x2a, 0x66, 0xf3, 0xc9, 0xea, 0xd0, 0x0d, 0x93, 0xef, 0x0d, 0xd2, 0x5a, 0xf6, 0x40, 0x40,
	0x2e, 0x33, 0xe4, 0x79, 0x72, 0x9d, 0x8a, 0x5e, 0x5a, 0xc9, 0x0f, 0x08, 0x8f, 0xf1, 0x43, 0x40,
	0x16, 0x45, 0x76, 0x8e, 0xb0, 0x96, 0x33, 0x44, 0x00, 0xe4, 0x0a, 0x83, 0x54, 0xc8, 0xdb, 0x74,
	0xd8, 0x55, 0x92, 0xee, 0xf1, 0xe3, 0xbb, 0x4f, 0xbe, 0x43, 0x78, 0xfc, 0x43, 0xc3, 0x15, 0x06,
	0x8d, 0x5d, 0x3a, 0x04, 0x40, 0xe3, 0xb7, 0x08, 0xf9, 0x3a, 0x03, 0xbd, 0x42, 0x2e, 0x0f, 0x05,
	0x25, 0xcf, 0x11, 0x26, 0xfd, 0xee, 0x9c, 0xac, 0x8b, 0x64, 0x27, 0xd9, 0x51, 0x4b, 0xb7, 0x8e,
	0x15, 0x0b, 0xe8, 0xef, 0x33, 0xf4, 0xdb, 0xe4, 0x5d, 0x9a, 0xe1, 0x95, 0x01, 0xdd, 0x8b, 0x5c,
	0x45, 0xf6, 0xc9, 0x53, 0x84, 0xcf, 0xfb, 0x39, 0xcf, 0x2e, 0x6b, 0xe0, 0x45, 0x41, 0x40, 0xd6,
	0x60, 0xe7, 0x2f, 0xf6, 0xe8, 0xc4, 0x65, 0x91, 0x3f, 0x10, 0x3e, 0xd7, 0x67, 0xa4, 0xc9, 0x4d,
	0x91, 0xfc, 0x26, 0xfa, 0x5f, 0x69, 0xfd, 0x38, 0xa1, 0x20, 0xe1, 0x36, 0x93, 0xb0, 0x46, 0x6e,
	0x50, 0xf1, 0xd7, 0x22, 0x74, 0x8f, 0xdf, 0x13, 0xf6, 0xc9, 0xef, 0x08, 0x13, 0xbf, 0x26, 0x99,
	0xd5, 0x0c, 0x72, 0xf3, 0xd2, 0xfa, 0x71, 0x42, 0x41, 0xcd, 0x32, 0x53, 0xb3, 0x40, 0xe6, 0x33,
	0xa8, 0x21, 0x3f, 0x23, 0x3c, 0x11, 0x72, 0xbd, 0x64, 0x59, 0x24, 0x9d, 0x31, 0xfb, 0x2a, 0xad,
	0x64, 0x0b, 0x02, 0xde, 0x35, 0xc6, 0xbb, 0x44, 0x16, 0xa9, 0xc8, 0x5b, 0xba, 0x70, 0xff, 0x79,
	0x8c, 0xf0, 0xa4, 0x9f, 0xf7, 0x0c, 0xd4, 0xfd, 0xa6, 0x5b, 0x80, 0x3a, 0xc1, 0x45, 0xcb, 0x0b,
	0x8c, 0x7a, 0x96, 0xbc, 0x25, 0x44, 0x4d, 0x7e, 0x43, 0xf8, 0x6c, 0xd4, 0xa5, 0x92, 0x1b, 0x22,
	0xd9, 0xea, 0x77, 0x99, 0xd2, 0x6a, 0xe6, 0x38, 0x40, 0xbe, 0xc5, 0x90, 0xdf, 0x21, 0xcb, 0x54,
	0xf0, 0x15, 0x67, 0x38, 0xd7, 0x4f, 0x10, 0x9e, 0xf2, 0x73, 0x9d, 0x4d, 0x41, 0xa2, 0x4f, 0x16,
	0x50, 0x90, 0x6c, 0x7c, 0xe5, 0x45, 0xa6, 0xa0, 0x44, 0xe6, 0x44, 0x15, 0xf0, 0x3e, 0x13, 0xf5,
	0x46, 0x62, 0x7d, 0x26, 0xd1, 0x06, 0x8a, 0xf5, 0x99, 0x64, 0x5f, 0x27, 0xd6, 0x67, 0x62, 0xce,
	0x2f, 0x5c, 0x03, 0xde, 0x67, 0x32, 0xab, 0x19, 0x64, 0x6a, 0xc5, 0xfa, 0xcc, 0x00, 0x35, 0x42,
	0x7d, 0x26, 0xa6, 0x66, 0xe3, 0xe6, 0xc1, 0x61, 0x11, 0x3d, 0x3b, 0x2c, 0xa2, 0xbf, 0x0f, 0x8b,
	0xe8, 0xeb, 0xa3, 0xe2, 0xc8, 0xb3, 0xa3, 0xe2, 0xc8, 0x9f, 0x47, 0xc5, 0x91, 0xcf, 0x66, 0xc2,
	0xab, 0x7c, 0x11, 0x59, 0xc7, 0x7b, 0xd4, 0xd1, 0xdc, 0xfa, 0x28, 0x7b, 0xa9, 0xbc, 0xfc, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xde, 0xd9, 0x57, 0x23, 0x80, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a CurrentRound by index.
	GetCurrentRound(ctx context.Context, in *QueryGetCurrentRoundRequest, opts ...grpc.CallOption) (*QueryGetCurrentRoundResponse, error)
	// ListRound Queries a list of Round items.
	GetRound(ctx context.Context, in *QueryGetRoundRequest, opts ...grpc.CallOption) (*QueryGetRoundResponse, error)
	// ListRound defines the ListRound RPC.
	ListRound(ctx context.Context, in *QueryAllRoundRequest, opts ...grpc.CallOption) (*QueryAllRoundResponse, error)
	// ListModelSubmission Queries a list of ModelSubmission items.
	GetModelSubmission(ctx context.Context, in *QueryGetModelSubmissionRequest, opts ...grpc.CallOption) (*QueryGetModelSubmissionResponse, error)
	// ListModelSubmission defines the ListModelSubmission RPC.
	ListModelSubmission(ctx context.Context, in *QueryAllModelSubmissionRequest, opts ...grpc.CallOption) (*QueryAllModelSubmissionResponse, error)
	// ListSubmittedScore Queries a list of SubmittedScore items.
	GetSubmittedScore(ctx context.Context, in *QueryGetSubmittedScoreRequest, opts ...grpc.CallOption) (*QueryGetSubmittedScoreResponse, error)
	// ListSubmittedScore defines the ListSubmittedScore RPC.
	ListSubmittedScore(ctx context.Context, in *QueryAllSubmittedScoreRequest, opts ...grpc.CallOption) (*QueryAllSubmittedScoreResponse, error)
	// ListFinalAtt Queries a list of FinalAtt items.
	GetFinalAtt(ctx context.Context, in *QueryGetFinalAttRequest, opts ...grpc.CallOption) (*QueryGetFinalAttResponse, error)
	// ListFinalAtt defines the ListFinalAtt RPC.
	ListFinalAtt(ctx context.Context, in *QueryAllFinalAttRequest, opts ...grpc.CallOption) (*QueryAllFinalAttResponse, error)
	// ListGlobalModel Queries a list of GlobalModel items.
	GetGlobalModel(ctx context.Context, in *QueryGetGlobalModelRequest, opts ...grpc.CallOption) (*QueryGetGlobalModelResponse, error)
	// ListGlobalModel defines the ListGlobalModel RPC.
	ListGlobalModel(ctx context.Context, in *QueryAllGlobalModelRequest, opts ...grpc.CallOption) (*QueryAllGlobalModelResponse, error)
	// ListRoundCommittee Queries a list of RoundCommittee items.
	GetRoundCommittee(ctx context.Context, in *QueryGetRoundCommitteeRequest, opts ...grpc.CallOption) (*QueryGetRoundCommitteeResponse, error)
	// ListRoundCommittee defines the ListRoundCommittee RPC.
	ListRoundCommittee(ctx context.Context, in *QueryAllRoundCommitteeRequest, opts ...grpc.CallOption) (*QueryAllRoundCommitteeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentRound(ctx context.Context, in *QueryGetCurrentRoundRequest, opts ...grpc.CallOption) (*QueryGetCurrentRoundResponse, error) {
	out := new(QueryGetCurrentRoundResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/GetCurrentRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRound(ctx context.Context, in *QueryGetRoundRequest, opts ...grpc.CallOption) (*QueryGetRoundResponse, error) {
	out := new(QueryGetRoundResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/GetRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListRound(ctx context.Context, in *QueryAllRoundRequest, opts ...grpc.CallOption) (*QueryAllRoundResponse, error) {
	out := new(QueryAllRoundResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/ListRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetModelSubmission(ctx context.Context, in *QueryGetModelSubmissionRequest, opts ...grpc.CallOption) (*QueryGetModelSubmissionResponse, error) {
	out := new(QueryGetModelSubmissionResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/GetModelSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListModelSubmission(ctx context.Context, in *QueryAllModelSubmissionRequest, opts ...grpc.CallOption) (*QueryAllModelSubmissionResponse, error) {
	out := new(QueryAllModelSubmissionResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/ListModelSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSubmittedScore(ctx context.Context, in *QueryGetSubmittedScoreRequest, opts ...grpc.CallOption) (*QueryGetSubmittedScoreResponse, error) {
	out := new(QueryGetSubmittedScoreResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/GetSubmittedScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListSubmittedScore(ctx context.Context, in *QueryAllSubmittedScoreRequest, opts ...grpc.CallOption) (*QueryAllSubmittedScoreResponse, error) {
	out := new(QueryAllSubmittedScoreResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/ListSubmittedScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetFinalAtt(ctx context.Context, in *QueryGetFinalAttRequest, opts ...grpc.CallOption) (*QueryGetFinalAttResponse, error) {
	out := new(QueryGetFinalAttResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/GetFinalAtt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListFinalAtt(ctx context.Context, in *QueryAllFinalAttRequest, opts ...grpc.CallOption) (*QueryAllFinalAttResponse, error) {
	out := new(QueryAllFinalAttResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/ListFinalAtt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGlobalModel(ctx context.Context, in *QueryGetGlobalModelRequest, opts ...grpc.CallOption) (*QueryGetGlobalModelResponse, error) {
	out := new(QueryGetGlobalModelResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/GetGlobalModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListGlobalModel(ctx context.Context, in *QueryAllGlobalModelRequest, opts ...grpc.CallOption) (*QueryAllGlobalModelResponse, error) {
	out := new(QueryAllGlobalModelResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/ListGlobalModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRoundCommittee(ctx context.Context, in *QueryGetRoundCommitteeRequest, opts ...grpc.CallOption) (*QueryGetRoundCommitteeResponse, error) {
	out := new(QueryGetRoundCommitteeResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/GetRoundCommittee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListRoundCommittee(ctx context.Context, in *QueryAllRoundCommitteeRequest, opts ...grpc.CallOption) (*QueryAllRoundCommitteeResponse, error) {
	out := new(QueryAllRoundCommitteeResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Query/ListRoundCommittee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a CurrentRound by index.
	GetCurrentRound(context.Context, *QueryGetCurrentRoundRequest) (*QueryGetCurrentRoundResponse, error)
	// ListRound Queries a list of Round items.
	GetRound(context.Context, *QueryGetRoundRequest) (*QueryGetRoundResponse, error)
	// ListRound defines the ListRound RPC.
	ListRound(context.Context, *QueryAllRoundRequest) (*QueryAllRoundResponse, error)
	// ListModelSubmission Queries a list of ModelSubmission items.
	GetModelSubmission(context.Context, *QueryGetModelSubmissionRequest) (*QueryGetModelSubmissionResponse, error)
	// ListModelSubmission defines the ListModelSubmission RPC.
	ListModelSubmission(context.Context, *QueryAllModelSubmissionRequest) (*QueryAllModelSubmissionResponse, error)
	// ListSubmittedScore Queries a list of SubmittedScore items.
	GetSubmittedScore(context.Context, *QueryGetSubmittedScoreRequest) (*QueryGetSubmittedScoreResponse, error)
	// ListSubmittedScore defines the ListSubmittedScore RPC.
	ListSubmittedScore(context.Context, *QueryAllSubmittedScoreRequest) (*QueryAllSubmittedScoreResponse, error)
	// ListFinalAtt Queries a list of FinalAtt items.
	GetFinalAtt(context.Context, *QueryGetFinalAttRequest) (*QueryGetFinalAttResponse, error)
	// ListFinalAtt defines the ListFinalAtt RPC.
	ListFinalAtt(context.Context, *QueryAllFinalAttRequest) (*QueryAllFinalAttResponse, error)
	// ListGlobalModel Queries a list of GlobalModel items.
	GetGlobalModel(context.Context, *QueryGetGlobalModelRequest) (*QueryGetGlobalModelResponse, error)
	// ListGlobalModel defines the ListGlobalModel RPC.
	ListGlobalModel(context.Context, *QueryAllGlobalModelRequest) (*QueryAllGlobalModelResponse, error)
	// ListRoundCommittee Queries a list of RoundCommittee items.
	GetRoundCommittee(context.Context, *QueryGetRoundCommitteeRequest) (*QueryGetRoundCommitteeResponse, error)
	// ListRoundCommittee defines the ListRoundCommittee RPC.
	ListRoundCommittee(context.Context, *QueryAllRoundCommitteeRequest) (*QueryAllRoundCommitteeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetCurrentRound(ctx context.Context, req *QueryGetCurrentRoundRequest) (*QueryGetCurrentRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentRound not implemented")
}
func (*UnimplementedQueryServer) GetRound(ctx context.Context, req *QueryGetRoundRequest) (*QueryGetRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRound not implemented")
}
func (*UnimplementedQueryServer) ListRound(ctx context.Context, req *QueryAllRoundRequest) (*QueryAllRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRound not implemented")
}
func (*UnimplementedQueryServer) GetModelSubmission(ctx context.Context, req *QueryGetModelSubmissionRequest) (*QueryGetModelSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelSubmission not implemented")
}
func (*UnimplementedQueryServer) ListModelSubmission(ctx context.Context, req *QueryAllModelSubmissionRequest) (*QueryAllModelSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelSubmission not implemented")
}
func (*UnimplementedQueryServer) GetSubmittedScore(ctx context.Context, req *QueryGetSubmittedScoreRequest) (*QueryGetSubmittedScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmittedScore not implemented")
}
func (*UnimplementedQueryServer) ListSubmittedScore(ctx context.Context, req *QueryAllSubmittedScoreRequest) (*QueryAllSubmittedScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmittedScore not implemented")
}
func (*UnimplementedQueryServer) GetFinalAtt(ctx context.Context, req *QueryGetFinalAttRequest) (*QueryGetFinalAttResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalAtt not implemented")
}
func (*UnimplementedQueryServer) ListFinalAtt(ctx context.Context, req *QueryAllFinalAttRequest) (*QueryAllFinalAttResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFinalAtt not implemented")
}
func (*UnimplementedQueryServer) GetGlobalModel(ctx context.Context, req *QueryGetGlobalModelRequest) (*QueryGetGlobalModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalModel not implemented")
}
func (*UnimplementedQueryServer) ListGlobalModel(ctx context.Context, req *QueryAllGlobalModelRequest) (*QueryAllGlobalModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGlobalModel not implemented")
}
func (*UnimplementedQueryServer) GetRoundCommittee(ctx context.Context, req *QueryGetRoundCommitteeRequest) (*QueryGetRoundCommitteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundCommittee not implemented")
}
func (*UnimplementedQueryServer) ListRoundCommittee(ctx context.Context, req *QueryAllRoundCommitteeRequest) (*QueryAllRoundCommitteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoundCommittee not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/GetCurrentRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentRound(ctx, req.(*QueryGetCurrentRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/GetRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRound(ctx, req.(*QueryGetRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/ListRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRound(ctx, req.(*QueryAllRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetModelSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetModelSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetModelSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/GetModelSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetModelSubmission(ctx, req.(*QueryGetModelSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListModelSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllModelSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListModelSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/ListModelSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListModelSubmission(ctx, req.(*QueryAllModelSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSubmittedScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubmittedScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSubmittedScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/GetSubmittedScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSubmittedScore(ctx, req.(*QueryGetSubmittedScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListSubmittedScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSubmittedScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListSubmittedScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/ListSubmittedScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListSubmittedScore(ctx, req.(*QueryAllSubmittedScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetFinalAtt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFinalAttRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetFinalAtt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/GetFinalAtt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetFinalAtt(ctx, req.(*QueryGetFinalAttRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListFinalAtt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFinalAttRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListFinalAtt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/ListFinalAtt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListFinalAtt(ctx, req.(*QueryAllFinalAttRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGlobalModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGlobalModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetGlobalModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/GetGlobalModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetGlobalModel(ctx, req.(*QueryGetGlobalModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListGlobalModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGlobalModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListGlobalModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/ListGlobalModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListGlobalModel(ctx, req.(*QueryAllGlobalModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRoundCommittee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRoundCommitteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRoundCommittee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/GetRoundCommittee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRoundCommittee(ctx, req.(*QueryGetRoundCommitteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListRoundCommittee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRoundCommitteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRoundCommittee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Query/ListRoundCommittee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRoundCommittee(ctx, req.(*QueryAllRoundCommitteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flmainchain.fedlearning.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetCurrentRound",
			Handler:    _Query_GetCurrentRound_Handler,
		},
		{
			MethodName: "GetRound",
			Handler:    _Query_GetRound_Handler,
		},
		{
			MethodName: "ListRound",
			Handler:    _Query_ListRound_Handler,
		},
		{
			MethodName: "GetModelSubmission",
			Handler:    _Query_GetModelSubmission_Handler,
		},
		{
			MethodName: "ListModelSubmission",
			Handler:    _Query_ListModelSubmission_Handler,
		},
		{
			MethodName: "GetSubmittedScore",
			Handler:    _Query_GetSubmittedScore_Handler,
		},
		{
			MethodName: "ListSubmittedScore",
			Handler:    _Query_ListSubmittedScore_Handler,
		},
		{
			MethodName: "GetFinalAtt",
			Handler:    _Query_GetFinalAtt_Handler,
		},
		{
			MethodName: "ListFinalAtt",
			Handler:    _Query_ListFinalAtt_Handler,
		},
		{
			MethodName: "GetGlobalModel",
			Handler:    _Query_GetGlobalModel_Handler,
		},
		{
			MethodName: "ListGlobalModel",
			Handler:    _Query_ListGlobalModel_Handler,
		},
		{
			MethodName: "GetRoundCommittee",
			Handler:    _Query_GetRoundCommittee_Handler,
		},
		{
			MethodName: "ListRoundCommittee",
			Handler:    _Query_ListRoundCommittee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flmainchain/fedlearning/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentRoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentRoundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentRoundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentRoundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CurrentRound.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRoundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRoundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRoundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Round.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRoundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRoundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRoundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Round) > 0 {
		for iNdEx := len(m.Round) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Round[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetModelSubmissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModelSubmissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModelSubmissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalHash) > 0 {
		i -= len(m.OriginalHash)
		copy(dAtA[i:], m.OriginalHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OriginalHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetModelSubmissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModelSubmissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModelSubmissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ModelSubmission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllModelSubmissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllModelSubmissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllModelSubmissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllModelSubmissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllModelSubmissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllModelSubmissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModelSubmission) > 0 {
		for iNdEx := len(m.ModelSubmission) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModelSubmission[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSubmittedScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubmittedScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubmittedScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScoreId) > 0 {
		i -= len(m.ScoreId)
		copy(dAtA[i:], m.ScoreId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScoreId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSubmittedScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubmittedScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubmittedScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SubmittedScore.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSubmittedScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSubmittedScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSubmittedScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSubmittedScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSubmittedScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSubmittedScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubmittedScore) > 0 {
		for iNdEx := len(m.SubmittedScore) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubmittedScore[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFinalAttRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFinalAttRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFinalAttRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFinalAttResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFinalAttResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFinalAttResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FinalAtt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFinalAttRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFinalAttRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFinalAttRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFinalAttResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFinalAttResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFinalAttResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FinalAtt) > 0 {
		for iNdEx := len(m.FinalAtt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalAtt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGlobalModelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGlobalModelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGlobalModelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGlobalModelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGlobalModelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGlobalModelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GlobalModel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGlobalModelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGlobalModelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGlobalModelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGlobalModelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGlobalModelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGlobalModelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GlobalModel) > 0 {
		for iNdEx := len(m.GlobalModel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GlobalModel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRoundCommitteeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRoundCommitteeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRoundCommitteeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRoundCommitteeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRoundCommitteeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRoundCommitteeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RoundCommittee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRoundCommitteeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRoundCommitteeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRoundCommitteeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRoundCommitteeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRoundCommitteeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRoundCommitteeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoundCommittee) > 0 {
		for iNdEx := len(m.RoundCommittee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoundCommittee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCurrentRoundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentRoundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CurrentRound.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRoundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovQuery(uint64(m.RoundId))
	}
	return n
}

func (m *QueryGetRoundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Round.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRoundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRoundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Round) > 0 {
		for _, e := range m.Round {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetModelSubmissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginalHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetModelSubmissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ModelSubmission.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllModelSubmissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllModelSubmissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ModelSubmission) > 0 {
		for _, e := range m.ModelSubmission {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSubmittedScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScoreId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSubmittedScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SubmittedScore.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSubmittedScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSubmittedScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubmittedScore) > 0 {
		for _, e := range m.SubmittedScore {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFinalAttRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovQuery(uint64(m.RoundId))
	}
	return n
}

func (m *QueryGetFinalAttResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FinalAtt.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFinalAttRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFinalAttResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FinalAtt) > 0 {
		for _, e := range m.FinalAtt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGlobalModelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovQuery(uint64(m.RoundId))
	}
	return n
}

func (m *QueryGetGlobalModelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GlobalModel.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGlobalModelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGlobalModelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GlobalModel) > 0 {
		for _, e := range m.GlobalModel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRoundCommitteeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovQuery(uint64(m.RoundId))
	}
	return n
}

func (m *QueryGetRoundCommitteeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RoundCommittee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRoundCommitteeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRoundCommitteeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoundCommittee) > 0 {
		for _, e := range m.RoundCommittee {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentRoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentRoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentRoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Round.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = append(m.Round, Round{})
			if err := m.Round[len(m.Round)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModelSubmissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModelSubmissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModelSubmissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModelSubmissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModelSubmissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModelSubmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSubmission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModelSubmission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllModelSubmissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllModelSubmissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllModelSubmissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllModelSubmissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllModelSubmissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllModelSubmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSubmission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelSubmission = append(m.ModelSubmission, ModelSubmission{})
			if err := m.ModelSubmission[len(m.ModelSubmission)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubmittedScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubmittedScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubmittedScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScoreId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubmittedScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubmittedScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubmittedScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedScore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubmittedScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSubmittedScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSubmittedScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSubmittedScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSubmittedScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSubmittedScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSubmittedScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedScore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmittedScore = append(m.SubmittedScore, SubmittedScore{})
			if err := m.SubmittedScore[len(m.SubmittedScore)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFinalAttRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFinalAttRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFinalAttRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFinalAttResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFinalAttResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFinalAttResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalAtt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalAtt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFinalAttRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFinalAttRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFinalAttRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFinalAttResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFinalAttResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFinalAttResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalAtt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalAtt = append(m.FinalAtt, FinalAtt{})
			if err := m.FinalAtt[len(m.FinalAtt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGlobalModelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGlobalModelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGlobalModelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGlobalModelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGlobalModelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGlobalModelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGlobalModelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGlobalModelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGlobalModelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGlobalModelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGlobalModelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGlobalModelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalModel = append(m.GlobalModel, GlobalModel{})
			if err := m.GlobalModel[len(m.GlobalModel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRoundCommitteeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRoundCommitteeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRoundCommitteeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRoundCommitteeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRoundCommitteeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRoundCommitteeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundCommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoundCommittee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRoundCommitteeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRoundCommitteeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRoundCommitteeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRoundCommitteeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRoundCommitteeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRoundCommitteeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundCommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundCommittee = append(m.RoundCommittee, RoundCommittee{})
			if err := m.RoundCommittee[len(m.RoundCommittee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
