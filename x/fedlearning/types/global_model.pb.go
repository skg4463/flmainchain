// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flmainchain/fedlearning/v1/global_model.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalModel defines the GlobalModel message.
type GlobalModel struct {
	RoundId      uint64 `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	OriginalHash string `protobuf:"bytes,2,opt,name=original_hash,json=originalHash,proto3" json:"original_hash,omitempty"`
}

func (m *GlobalModel) Reset()         { *m = GlobalModel{} }
func (m *GlobalModel) String() string { return proto.CompactTextString(m) }
func (*GlobalModel) ProtoMessage()    {}
func (*GlobalModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae45c9a5dbb41809, []int{0}
}
func (m *GlobalModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalModel.Merge(m, src)
}
func (m *GlobalModel) XXX_Size() int {
	return m.Size()
}
func (m *GlobalModel) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalModel.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalModel proto.InternalMessageInfo

func (m *GlobalModel) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *GlobalModel) GetOriginalHash() string {
	if m != nil {
		return m.OriginalHash
	}
	return ""
}

func init() {
	proto.RegisterType((*GlobalModel)(nil), "flmainchain.fedlearning.v1.GlobalModel")
}

func init() {
	proto.RegisterFile("flmainchain/fedlearning/v1/global_model.proto", fileDescriptor_ae45c9a5dbb41809)
}

var fileDescriptor_ae45c9a5dbb41809 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4d, 0xcb, 0xc9, 0x4d,
	0xcc, 0xcc, 0x4b, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0x4b, 0x4d, 0xc9, 0x49, 0x4d, 0x2c, 0xca,
	0xcb, 0xcc, 0x4b, 0xd7, 0x2f, 0x33, 0xd4, 0x4f, 0xcf, 0xc9, 0x4f, 0x4a, 0xcc, 0x89, 0xcf, 0xcd,
	0x4f, 0x49, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x42, 0x52, 0xae, 0x87, 0xa4,
	0x5c, 0xaf, 0xcc, 0x50, 0xc9, 0x97, 0x8b, 0xdb, 0x1d, 0xac, 0xc3, 0x17, 0xa4, 0x41, 0x48, 0x92,
	0x8b, 0xa3, 0x28, 0xbf, 0x34, 0x2f, 0x25, 0x3e, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x25,
	0x88, 0x1d, 0xcc, 0xf7, 0x4c, 0x11, 0x52, 0xe6, 0xe2, 0xcd, 0x2f, 0xca, 0x4c, 0xcf, 0xcc, 0x4b,
	0xcc, 0x89, 0xcf, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x81, 0x09,
	0x7a, 0x24, 0x16, 0x67, 0x38, 0x59, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43,
	0x94, 0x3c, 0xb2, 0x9b, 0x2b, 0x50, 0x5c, 0x5d, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x76,
	0xac, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x5c, 0x49, 0x0d, 0xdd, 0x00, 0x00, 0x00,
}

func (m *GlobalModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalHash) > 0 {
		i -= len(m.OriginalHash)
		copy(dAtA[i:], m.OriginalHash)
		i = encodeVarintGlobalModel(dAtA, i, uint64(len(m.OriginalHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoundId != 0 {
		i = encodeVarintGlobalModel(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGlobalModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovGlobalModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovGlobalModel(uint64(m.RoundId))
	}
	l = len(m.OriginalHash)
	if l > 0 {
		n += 1 + l + sovGlobalModel(uint64(l))
	}
	return n
}

func sovGlobalModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGlobalModel(x uint64) (n int) {
	return sovGlobalModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GlobalModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGlobalModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlobalModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlobalModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGlobalModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGlobalModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGlobalModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGlobalModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGlobalModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGlobalModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGlobalModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGlobalModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGlobalModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGlobalModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGlobalModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGlobalModel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGlobalModel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGlobalModel = fmt.Errorf("proto: unexpected end of group")
)
