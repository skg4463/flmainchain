// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flmainchain/fedlearning/v1/final_att.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FinalAtt defines the FinalAtt message.
type FinalAtt struct {
	RoundId        uint64   `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	LnodeAddresses []string `protobuf:"bytes,2,rep,name=lnode_addresses,json=lnodeAddresses,proto3" json:"lnode_addresses,omitempty"`
	Scores         []string `protobuf:"bytes,3,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (m *FinalAtt) Reset()         { *m = FinalAtt{} }
func (m *FinalAtt) String() string { return proto.CompactTextString(m) }
func (*FinalAtt) ProtoMessage()    {}
func (*FinalAtt) Descriptor() ([]byte, []int) {
	return fileDescriptor_7747159509dbd44b, []int{0}
}
func (m *FinalAtt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalAtt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalAtt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalAtt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalAtt.Merge(m, src)
}
func (m *FinalAtt) XXX_Size() int {
	return m.Size()
}
func (m *FinalAtt) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalAtt.DiscardUnknown(m)
}

var xxx_messageInfo_FinalAtt proto.InternalMessageInfo

func (m *FinalAtt) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *FinalAtt) GetLnodeAddresses() []string {
	if m != nil {
		return m.LnodeAddresses
	}
	return nil
}

func (m *FinalAtt) GetScores() []string {
	if m != nil {
		return m.Scores
	}
	return nil
}

func init() {
	proto.RegisterType((*FinalAtt)(nil), "flmainchain.fedlearning.v1.FinalAtt")
}

func init() {
	proto.RegisterFile("flmainchain/fedlearning/v1/final_att.proto", fileDescriptor_7747159509dbd44b)
}

var fileDescriptor_7747159509dbd44b = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4a, 0xcb, 0xc9, 0x4d,
	0xcc, 0xcc, 0x4b, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0x4b, 0x4d, 0xc9, 0x49, 0x4d, 0x2c, 0xca,
	0xcb, 0xcc, 0x4b, 0xd7, 0x2f, 0x33, 0xd4, 0x4f, 0xcb, 0xcc, 0x4b, 0xcc, 0x89, 0x4f, 0x2c, 0x29,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x42, 0x52, 0xab, 0x87, 0xa4, 0x56, 0xaf, 0xcc,
	0x50, 0x29, 0x8d, 0x8b, 0xc3, 0x0d, 0xa4, 0xdc, 0xb1, 0xa4, 0x44, 0x48, 0x92, 0x8b, 0xa3, 0x28,
	0xbf, 0x34, 0x2f, 0x25, 0x3e, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x25, 0x88, 0x1d, 0xcc,
	0xf7, 0x4c, 0x11, 0x52, 0xe7, 0xe2, 0xcf, 0xc9, 0xcb, 0x4f, 0x49, 0x8d, 0x4f, 0x4c, 0x49, 0x29,
	0x4a, 0x2d, 0x2e, 0x4e, 0x2d, 0x96, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x0c, 0xe2, 0x03, 0x0b, 0x3b,
	0xc2, 0x44, 0x85, 0xc4, 0xb8, 0xd8, 0x8a, 0x93, 0xf3, 0x8b, 0x52, 0x8b, 0x25, 0x98, 0xc1, 0xf2,
	0x50, 0x9e, 0x93, 0xe5, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xc9, 0x23,
	0xfb, 0xa4, 0x02, 0xc5, 0x2f, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x5f, 0x18, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xec, 0x12, 0xc9, 0xfe, 0xf3, 0x00, 0x00, 0x00,
}

func (m *FinalAtt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalAtt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalAtt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Scores[iNdEx])
			copy(dAtA[i:], m.Scores[iNdEx])
			i = encodeVarintFinalAtt(dAtA, i, uint64(len(m.Scores[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LnodeAddresses) > 0 {
		for iNdEx := len(m.LnodeAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LnodeAddresses[iNdEx])
			copy(dAtA[i:], m.LnodeAddresses[iNdEx])
			i = encodeVarintFinalAtt(dAtA, i, uint64(len(m.LnodeAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RoundId != 0 {
		i = encodeVarintFinalAtt(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFinalAtt(dAtA []byte, offset int, v uint64) int {
	offset -= sovFinalAtt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FinalAtt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovFinalAtt(uint64(m.RoundId))
	}
	if len(m.LnodeAddresses) > 0 {
		for _, s := range m.LnodeAddresses {
			l = len(s)
			n += 1 + l + sovFinalAtt(uint64(l))
		}
	}
	if len(m.Scores) > 0 {
		for _, s := range m.Scores {
			l = len(s)
			n += 1 + l + sovFinalAtt(uint64(l))
		}
	}
	return n
}

func sovFinalAtt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFinalAtt(x uint64) (n int) {
	return sovFinalAtt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FinalAtt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinalAtt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalAtt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalAtt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalAtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LnodeAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalAtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFinalAtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFinalAtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LnodeAddresses = append(m.LnodeAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalAtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFinalAtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFinalAtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFinalAtt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinalAtt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFinalAtt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFinalAtt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinalAtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinalAtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFinalAtt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFinalAtt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFinalAtt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFinalAtt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFinalAtt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFinalAtt = fmt.Errorf("proto: unexpected end of group")
)
