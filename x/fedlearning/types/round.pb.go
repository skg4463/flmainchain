// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flmainchain/fedlearning/v1/round.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Round defines the Round message.
type Round struct {
	RoundId         uint64   `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Status          string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	RequiredLNodes  []string `protobuf:"bytes,3,rep,name=required_l_nodes,json=requiredLNodes,proto3" json:"required_l_nodes,omitempty"`
	SubmittedLNodes []string `protobuf:"bytes,4,rep,name=submitted_l_nodes,json=submittedLNodes,proto3" json:"submitted_l_nodes,omitempty"`
	RequiredCNodes  []string `protobuf:"bytes,5,rep,name=required_c_nodes,json=requiredCNodes,proto3" json:"required_c_nodes,omitempty"`
	SubmittedCNodes []string `protobuf:"bytes,6,rep,name=submitted_c_nodes,json=submittedCNodes,proto3" json:"submitted_c_nodes,omitempty"`
}

func (m *Round) Reset()         { *m = Round{} }
func (m *Round) String() string { return proto.CompactTextString(m) }
func (*Round) ProtoMessage()    {}
func (*Round) Descriptor() ([]byte, []int) {
	return fileDescriptor_d25e1b26b71105d6, []int{0}
}
func (m *Round) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Round) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Round.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Round) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Round.Merge(m, src)
}
func (m *Round) XXX_Size() int {
	return m.Size()
}
func (m *Round) XXX_DiscardUnknown() {
	xxx_messageInfo_Round.DiscardUnknown(m)
}

var xxx_messageInfo_Round proto.InternalMessageInfo

func (m *Round) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *Round) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Round) GetRequiredLNodes() []string {
	if m != nil {
		return m.RequiredLNodes
	}
	return nil
}

func (m *Round) GetSubmittedLNodes() []string {
	if m != nil {
		return m.SubmittedLNodes
	}
	return nil
}

func (m *Round) GetRequiredCNodes() []string {
	if m != nil {
		return m.RequiredCNodes
	}
	return nil
}

func (m *Round) GetSubmittedCNodes() []string {
	if m != nil {
		return m.SubmittedCNodes
	}
	return nil
}

func init() {
	proto.RegisterType((*Round)(nil), "flmainchain.fedlearning.v1.Round")
}

func init() {
	proto.RegisterFile("flmainchain/fedlearning/v1/round.proto", fileDescriptor_d25e1b26b71105d6)
}

var fileDescriptor_d25e1b26b71105d6 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0xcb, 0xc9, 0x4d,
	0xcc, 0xcc, 0x4b, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0x4b, 0x4d, 0xc9, 0x49, 0x4d, 0x2c, 0xca,
	0xcb, 0xcc, 0x4b, 0xd7, 0x2f, 0x33, 0xd4, 0x2f, 0xca, 0x2f, 0xcd, 0x4b, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x92, 0x42, 0x52, 0xa7, 0x87, 0xa4, 0x4e, 0xaf, 0xcc, 0x50, 0xe9, 0x19, 0x23,
	0x17, 0x6b, 0x10, 0x48, 0xad, 0x90, 0x24, 0x17, 0x07, 0x58, 0x53, 0x7c, 0x66, 0x8a, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x4b, 0x10, 0x3b, 0x98, 0xef, 0x99, 0x22, 0x24, 0xc6, 0xc5, 0x56, 0x5c, 0x92,
	0x58, 0x52, 0x5a, 0x2c, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe5, 0x09, 0x69, 0x70, 0x09,
	0x14, 0xa5, 0x16, 0x96, 0x66, 0x16, 0xa5, 0xa6, 0xc4, 0xe7, 0xc4, 0xe7, 0xe5, 0xa7, 0xa4, 0x16,
	0x4b, 0x30, 0x2b, 0x30, 0x6b, 0x70, 0x06, 0xf1, 0xc1, 0xc4, 0x7d, 0xfc, 0x40, 0xa2, 0x42, 0x5a,
	0x5c, 0x82, 0xc5, 0xa5, 0x49, 0xb9, 0x99, 0x25, 0x25, 0x48, 0x4a, 0x59, 0xc0, 0x4a, 0xf9, 0xe1,
	0x12, 0x50, 0xb5, 0xc8, 0xa6, 0x26, 0x43, 0x95, 0xb2, 0xa2, 0x9a, 0xea, 0x8c, 0xc5, 0x54, 0x98,
	0x52, 0x36, 0x34, 0x53, 0x21, 0x6a, 0x9d, 0x2c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e,
	0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58,
	0x8e, 0x21, 0x4a, 0x1e, 0x39, 0x18, 0x2b, 0x50, 0x02, 0xb2, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89,
	0x0d, 0x1c, 0x8c, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xa4, 0x95, 0x7a, 0x70, 0x01,
	0x00, 0x00,
}

func (m *Round) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Round) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Round) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubmittedCNodes) > 0 {
		for iNdEx := len(m.SubmittedCNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubmittedCNodes[iNdEx])
			copy(dAtA[i:], m.SubmittedCNodes[iNdEx])
			i = encodeVarintRound(dAtA, i, uint64(len(m.SubmittedCNodes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RequiredCNodes) > 0 {
		for iNdEx := len(m.RequiredCNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredCNodes[iNdEx])
			copy(dAtA[i:], m.RequiredCNodes[iNdEx])
			i = encodeVarintRound(dAtA, i, uint64(len(m.RequiredCNodes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SubmittedLNodes) > 0 {
		for iNdEx := len(m.SubmittedLNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubmittedLNodes[iNdEx])
			copy(dAtA[i:], m.SubmittedLNodes[iNdEx])
			i = encodeVarintRound(dAtA, i, uint64(len(m.SubmittedLNodes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RequiredLNodes) > 0 {
		for iNdEx := len(m.RequiredLNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredLNodes[iNdEx])
			copy(dAtA[i:], m.RequiredLNodes[iNdEx])
			i = encodeVarintRound(dAtA, i, uint64(len(m.RequiredLNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintRound(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoundId != 0 {
		i = encodeVarintRound(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRound(dAtA []byte, offset int, v uint64) int {
	offset -= sovRound(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Round) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovRound(uint64(m.RoundId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovRound(uint64(l))
	}
	if len(m.RequiredLNodes) > 0 {
		for _, s := range m.RequiredLNodes {
			l = len(s)
			n += 1 + l + sovRound(uint64(l))
		}
	}
	if len(m.SubmittedLNodes) > 0 {
		for _, s := range m.SubmittedLNodes {
			l = len(s)
			n += 1 + l + sovRound(uint64(l))
		}
	}
	if len(m.RequiredCNodes) > 0 {
		for _, s := range m.RequiredCNodes {
			l = len(s)
			n += 1 + l + sovRound(uint64(l))
		}
	}
	if len(m.SubmittedCNodes) > 0 {
		for _, s := range m.SubmittedCNodes {
			l = len(s)
			n += 1 + l + sovRound(uint64(l))
		}
	}
	return n
}

func sovRound(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRound(x uint64) (n int) {
	return sovRound(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Round) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRound
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Round: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Round: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredLNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredLNodes = append(m.RequiredLNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedLNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmittedLNodes = append(m.SubmittedLNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredCNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredCNodes = append(m.RequiredCNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedCNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmittedCNodes = append(m.SubmittedCNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRound(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRound
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRound(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRound
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRound
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRound
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRound
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRound
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRound
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRound        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRound          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRound = fmt.Errorf("proto: unexpected end of group")
)
