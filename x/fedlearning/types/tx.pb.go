// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flmainchain/fedlearning/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgCreateCurrentRound defines the MsgCreateCurrentRound message.
type MsgCreateCurrentRound struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RoundId uint64 `protobuf:"varint,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *MsgCreateCurrentRound) Reset()         { *m = MsgCreateCurrentRound{} }
func (m *MsgCreateCurrentRound) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCurrentRound) ProtoMessage()    {}
func (*MsgCreateCurrentRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{2}
}
func (m *MsgCreateCurrentRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCurrentRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCurrentRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCurrentRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCurrentRound.Merge(m, src)
}
func (m *MsgCreateCurrentRound) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCurrentRound) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCurrentRound.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCurrentRound proto.InternalMessageInfo

func (m *MsgCreateCurrentRound) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateCurrentRound) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

// MsgCreateCurrentRoundResponse defines the MsgCreateCurrentRoundResponse message.
type MsgCreateCurrentRoundResponse struct {
}

func (m *MsgCreateCurrentRoundResponse) Reset()         { *m = MsgCreateCurrentRoundResponse{} }
func (m *MsgCreateCurrentRoundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCurrentRoundResponse) ProtoMessage()    {}
func (*MsgCreateCurrentRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{3}
}
func (m *MsgCreateCurrentRoundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCurrentRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCurrentRoundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCurrentRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCurrentRoundResponse.Merge(m, src)
}
func (m *MsgCreateCurrentRoundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCurrentRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCurrentRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCurrentRoundResponse proto.InternalMessageInfo

// MsgUpdateCurrentRound defines the MsgUpdateCurrentRound message.
type MsgUpdateCurrentRound struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RoundId uint64 `protobuf:"varint,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *MsgUpdateCurrentRound) Reset()         { *m = MsgUpdateCurrentRound{} }
func (m *MsgUpdateCurrentRound) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCurrentRound) ProtoMessage()    {}
func (*MsgUpdateCurrentRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{4}
}
func (m *MsgUpdateCurrentRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCurrentRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCurrentRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCurrentRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCurrentRound.Merge(m, src)
}
func (m *MsgUpdateCurrentRound) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCurrentRound) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCurrentRound.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCurrentRound proto.InternalMessageInfo

func (m *MsgUpdateCurrentRound) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateCurrentRound) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

// MsgUpdateCurrentRoundResponse defines the MsgUpdateCurrentRoundResponse message.
type MsgUpdateCurrentRoundResponse struct {
}

func (m *MsgUpdateCurrentRoundResponse) Reset()         { *m = MsgUpdateCurrentRoundResponse{} }
func (m *MsgUpdateCurrentRoundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCurrentRoundResponse) ProtoMessage()    {}
func (*MsgUpdateCurrentRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{5}
}
func (m *MsgUpdateCurrentRoundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCurrentRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCurrentRoundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCurrentRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCurrentRoundResponse.Merge(m, src)
}
func (m *MsgUpdateCurrentRoundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCurrentRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCurrentRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCurrentRoundResponse proto.InternalMessageInfo

// MsgDeleteCurrentRound defines the MsgDeleteCurrentRound message.
type MsgDeleteCurrentRound struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgDeleteCurrentRound) Reset()         { *m = MsgDeleteCurrentRound{} }
func (m *MsgDeleteCurrentRound) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCurrentRound) ProtoMessage()    {}
func (*MsgDeleteCurrentRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{6}
}
func (m *MsgDeleteCurrentRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCurrentRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCurrentRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCurrentRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCurrentRound.Merge(m, src)
}
func (m *MsgDeleteCurrentRound) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCurrentRound) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCurrentRound.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCurrentRound proto.InternalMessageInfo

func (m *MsgDeleteCurrentRound) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgDeleteCurrentRoundResponse defines the MsgDeleteCurrentRoundResponse message.
type MsgDeleteCurrentRoundResponse struct {
}

func (m *MsgDeleteCurrentRoundResponse) Reset()         { *m = MsgDeleteCurrentRoundResponse{} }
func (m *MsgDeleteCurrentRoundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCurrentRoundResponse) ProtoMessage()    {}
func (*MsgDeleteCurrentRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{7}
}
func (m *MsgDeleteCurrentRoundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCurrentRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCurrentRoundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCurrentRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCurrentRoundResponse.Merge(m, src)
}
func (m *MsgDeleteCurrentRoundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCurrentRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCurrentRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCurrentRoundResponse proto.InternalMessageInfo

// MsgInitRound defines the MsgInitRound message.
type MsgInitRound struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// repeated string initial_members = 2;
	InitialLNodes []string `protobuf:"bytes,2,rep,name=initial_l_nodes,json=initialLNodes,proto3" json:"initial_l_nodes,omitempty"`
	InitialCNodes []string `protobuf:"bytes,3,rep,name=initial_c_nodes,json=initialCNodes,proto3" json:"initial_c_nodes,omitempty"`
}

func (m *MsgInitRound) Reset()         { *m = MsgInitRound{} }
func (m *MsgInitRound) String() string { return proto.CompactTextString(m) }
func (*MsgInitRound) ProtoMessage()    {}
func (*MsgInitRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{8}
}
func (m *MsgInitRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitRound.Merge(m, src)
}
func (m *MsgInitRound) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitRound) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitRound.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitRound proto.InternalMessageInfo

func (m *MsgInitRound) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInitRound) GetInitialLNodes() []string {
	if m != nil {
		return m.InitialLNodes
	}
	return nil
}

func (m *MsgInitRound) GetInitialCNodes() []string {
	if m != nil {
		return m.InitialCNodes
	}
	return nil
}

// MsgInitRoundResponse defines the MsgInitRoundResponse message.
type MsgInitRoundResponse struct {
}

func (m *MsgInitRoundResponse) Reset()         { *m = MsgInitRoundResponse{} }
func (m *MsgInitRoundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitRoundResponse) ProtoMessage()    {}
func (*MsgInitRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{9}
}
func (m *MsgInitRoundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitRoundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitRoundResponse.Merge(m, src)
}
func (m *MsgInitRoundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitRoundResponse proto.InternalMessageInfo

// MsgSubmitWeight defines the MsgSubmitWeight message.
type MsgSubmitWeight struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RoundId      uint64 `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	OriginalHash string `protobuf:"bytes,3,opt,name=original_hash,json=originalHash,proto3" json:"original_hash,omitempty"`
	Tag          string `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *MsgSubmitWeight) Reset()         { *m = MsgSubmitWeight{} }
func (m *MsgSubmitWeight) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWeight) ProtoMessage()    {}
func (*MsgSubmitWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{10}
}
func (m *MsgSubmitWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWeight.Merge(m, src)
}
func (m *MsgSubmitWeight) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWeight.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWeight proto.InternalMessageInfo

func (m *MsgSubmitWeight) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitWeight) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *MsgSubmitWeight) GetOriginalHash() string {
	if m != nil {
		return m.OriginalHash
	}
	return ""
}

func (m *MsgSubmitWeight) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// MsgSubmitWeightResponse defines the MsgSubmitWeightResponse message.
type MsgSubmitWeightResponse struct {
}

func (m *MsgSubmitWeightResponse) Reset()         { *m = MsgSubmitWeightResponse{} }
func (m *MsgSubmitWeightResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWeightResponse) ProtoMessage()    {}
func (*MsgSubmitWeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{11}
}
func (m *MsgSubmitWeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWeightResponse.Merge(m, src)
}
func (m *MsgSubmitWeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWeightResponse proto.InternalMessageInfo

// MsgSubmitScore defines the MsgSubmitScore message.
type MsgSubmitScore struct {
	Creator        string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RoundId        uint64   `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	LnodeAddresses []string `protobuf:"bytes,3,rep,name=lnode_addresses,json=lnodeAddresses,proto3" json:"lnode_addresses,omitempty"`
	Scores         []string `protobuf:"bytes,4,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (m *MsgSubmitScore) Reset()         { *m = MsgSubmitScore{} }
func (m *MsgSubmitScore) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitScore) ProtoMessage()    {}
func (*MsgSubmitScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{12}
}
func (m *MsgSubmitScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitScore.Merge(m, src)
}
func (m *MsgSubmitScore) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitScore) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitScore.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitScore proto.InternalMessageInfo

func (m *MsgSubmitScore) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitScore) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *MsgSubmitScore) GetLnodeAddresses() []string {
	if m != nil {
		return m.LnodeAddresses
	}
	return nil
}

func (m *MsgSubmitScore) GetScores() []string {
	if m != nil {
		return m.Scores
	}
	return nil
}

// MsgSubmitScoreResponse defines the MsgSubmitScoreResponse message.
type MsgSubmitScoreResponse struct {
}

func (m *MsgSubmitScoreResponse) Reset()         { *m = MsgSubmitScoreResponse{} }
func (m *MsgSubmitScoreResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitScoreResponse) ProtoMessage()    {}
func (*MsgSubmitScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{13}
}
func (m *MsgSubmitScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitScoreResponse.Merge(m, src)
}
func (m *MsgSubmitScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitScoreResponse proto.InternalMessageInfo

// MsgSubmitGlobalModel defines the MsgSubmitGlobalModel message.
type MsgSubmitGlobalModel struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RoundId      uint64 `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	OriginalHash string `protobuf:"bytes,3,opt,name=original_hash,json=originalHash,proto3" json:"original_hash,omitempty"`
}

func (m *MsgSubmitGlobalModel) Reset()         { *m = MsgSubmitGlobalModel{} }
func (m *MsgSubmitGlobalModel) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitGlobalModel) ProtoMessage()    {}
func (*MsgSubmitGlobalModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{14}
}
func (m *MsgSubmitGlobalModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitGlobalModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitGlobalModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitGlobalModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitGlobalModel.Merge(m, src)
}
func (m *MsgSubmitGlobalModel) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitGlobalModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitGlobalModel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitGlobalModel proto.InternalMessageInfo

func (m *MsgSubmitGlobalModel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitGlobalModel) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *MsgSubmitGlobalModel) GetOriginalHash() string {
	if m != nil {
		return m.OriginalHash
	}
	return ""
}

// MsgSubmitGlobalModelResponse defines the MsgSubmitGlobalModelResponse message.
type MsgSubmitGlobalModelResponse struct {
}

func (m *MsgSubmitGlobalModelResponse) Reset()         { *m = MsgSubmitGlobalModelResponse{} }
func (m *MsgSubmitGlobalModelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitGlobalModelResponse) ProtoMessage()    {}
func (*MsgSubmitGlobalModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52322a024a8fe17, []int{15}
}
func (m *MsgSubmitGlobalModelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitGlobalModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitGlobalModelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitGlobalModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitGlobalModelResponse.Merge(m, src)
}
func (m *MsgSubmitGlobalModelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitGlobalModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitGlobalModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitGlobalModelResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "flmainchain.fedlearning.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "flmainchain.fedlearning.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateCurrentRound)(nil), "flmainchain.fedlearning.v1.MsgCreateCurrentRound")
	proto.RegisterType((*MsgCreateCurrentRoundResponse)(nil), "flmainchain.fedlearning.v1.MsgCreateCurrentRoundResponse")
	proto.RegisterType((*MsgUpdateCurrentRound)(nil), "flmainchain.fedlearning.v1.MsgUpdateCurrentRound")
	proto.RegisterType((*MsgUpdateCurrentRoundResponse)(nil), "flmainchain.fedlearning.v1.MsgUpdateCurrentRoundResponse")
	proto.RegisterType((*MsgDeleteCurrentRound)(nil), "flmainchain.fedlearning.v1.MsgDeleteCurrentRound")
	proto.RegisterType((*MsgDeleteCurrentRoundResponse)(nil), "flmainchain.fedlearning.v1.MsgDeleteCurrentRoundResponse")
	proto.RegisterType((*MsgInitRound)(nil), "flmainchain.fedlearning.v1.MsgInitRound")
	proto.RegisterType((*MsgInitRoundResponse)(nil), "flmainchain.fedlearning.v1.MsgInitRoundResponse")
	proto.RegisterType((*MsgSubmitWeight)(nil), "flmainchain.fedlearning.v1.MsgSubmitWeight")
	proto.RegisterType((*MsgSubmitWeightResponse)(nil), "flmainchain.fedlearning.v1.MsgSubmitWeightResponse")
	proto.RegisterType((*MsgSubmitScore)(nil), "flmainchain.fedlearning.v1.MsgSubmitScore")
	proto.RegisterType((*MsgSubmitScoreResponse)(nil), "flmainchain.fedlearning.v1.MsgSubmitScoreResponse")
	proto.RegisterType((*MsgSubmitGlobalModel)(nil), "flmainchain.fedlearning.v1.MsgSubmitGlobalModel")
	proto.RegisterType((*MsgSubmitGlobalModelResponse)(nil), "flmainchain.fedlearning.v1.MsgSubmitGlobalModelResponse")
}

func init() {
	proto.RegisterFile("flmainchain/fedlearning/v1/tx.proto", fileDescriptor_c52322a024a8fe17)
}

var fileDescriptor_c52322a024a8fe17 = []byte{
	// 760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x4f, 0x13, 0x4d,
	0x18, 0xee, 0x52, 0x3e, 0xf8, 0x3a, 0x14, 0xf8, 0xd8, 0xf0, 0x41, 0xd9, 0xe8, 0x42, 0x4a, 0x22,
	0xb5, 0xc6, 0x96, 0x96, 0xc4, 0x08, 0xf1, 0x02, 0x68, 0x94, 0xc4, 0x1a, 0xb3, 0xc4, 0x18, 0xbd,
	0x34, 0x43, 0x77, 0xd8, 0x4e, 0xb2, 0xbb, 0xb3, 0xd9, 0x99, 0x12, 0x38, 0x69, 0x38, 0x7a, 0xf2,
	0xe8, 0xd1, 0x8b, 0x89, 0x27, 0xc3, 0xc1, 0x3f, 0x82, 0x93, 0x21, 0x9e, 0x38, 0x19, 0x03, 0x07,
	0xfe, 0x0d, 0xb3, 0xb3, 0x3f, 0xd8, 0xdd, 0x6e, 0xd9, 0x36, 0x18, 0xbd, 0x34, 0x9d, 0xf7, 0x7d,
	0xde, 0xf7, 0x7d, 0x9e, 0x99, 0xd9, 0x27, 0x03, 0x16, 0x77, 0x75, 0x03, 0x62, 0xb3, 0xd5, 0x86,
	0xd8, 0xac, 0xee, 0x22, 0x55, 0x47, 0xd0, 0x36, 0xb1, 0xa9, 0x55, 0xf7, 0x6a, 0x55, 0xb6, 0x5f,
	0xb1, 0x6c, 0xc2, 0x88, 0x28, 0x85, 0x40, 0x95, 0x10, 0xa8, 0xb2, 0x57, 0x93, 0xa6, 0xa0, 0x81,
	0x4d, 0x52, 0xe5, 0xbf, 0x2e, 0x5c, 0x9a, 0x6d, 0x11, 0x6a, 0x10, 0x5a, 0x35, 0x28, 0x6f, 0x63,
	0x50, 0xcd, 0x4b, 0xcc, 0xb9, 0x89, 0x26, 0x5f, 0x55, 0xdd, 0x85, 0x97, 0x5a, 0xba, 0x82, 0x87,
	0x05, 0x6d, 0x68, 0xf8, 0xc0, 0x69, 0x8d, 0x68, 0xc4, 0x6d, 0xe0, 0xfc, 0x73, 0xa3, 0xc5, 0x6f,
	0x02, 0x98, 0x6c, 0x50, 0xed, 0x85, 0xa5, 0x42, 0x86, 0x9e, 0x73, 0xbc, 0x78, 0x0f, 0xe4, 0x60,
	0x87, 0xb5, 0x89, 0x8d, 0xd9, 0x41, 0x41, 0x58, 0x10, 0x4a, 0xb9, 0x8d, 0xc2, 0xf7, 0xaf, 0x77,
	0xa7, 0xbd, 0xb9, 0xeb, 0xaa, 0x6a, 0x23, 0x4a, 0xb7, 0x99, 0x8d, 0x4d, 0x4d, 0xb9, 0x84, 0x8a,
	0x8f, 0xc0, 0x88, 0x3b, 0xb1, 0x30, 0xb4, 0x20, 0x94, 0xc6, 0xea, 0xc5, 0x4a, 0x6f, 0xf9, 0x15,
	0x77, 0xd6, 0x46, 0xee, 0xf8, 0xc7, 0x7c, 0xe6, 0xf3, 0xc5, 0x51, 0x59, 0x50, 0xbc, 0xe2, 0xb5,
	0x07, 0x87, 0x17, 0x47, 0xe5, 0xcb, 0xb6, 0xef, 0x2e, 0x8e, 0xca, 0xb7, 0xc3, 0x22, 0xf7, 0x23,
	0x32, 0x63, 0xe4, 0x8b, 0x73, 0x60, 0x36, 0x16, 0x52, 0x10, 0xb5, 0x88, 0x49, 0x51, 0x91, 0x81,
	0xff, 0x1b, 0x54, 0xdb, 0xb4, 0x11, 0x64, 0x68, 0xb3, 0x63, 0xdb, 0xc8, 0x64, 0x0a, 0xe9, 0x98,
	0xaa, 0x58, 0x07, 0xa3, 0x2d, 0x27, 0x4a, 0xec, 0x54, 0xb9, 0x3e, 0x50, 0x9c, 0x03, 0xff, 0xda,
	0x4e, 0x71, 0x13, 0xab, 0x85, 0xec, 0x82, 0x50, 0x1a, 0x56, 0x46, 0xf9, 0x7a, 0x4b, 0x5d, 0xcb,
	0x3b, 0x02, 0x7c, 0x60, 0x71, 0x1e, 0xdc, 0x4c, 0x9c, 0x1a, 0xa3, 0xe5, 0x32, 0xfe, 0xd3, 0xb4,
	0xba, 0xa7, 0x06, 0xb4, 0x5e, 0x71, 0x5a, 0x0f, 0x91, 0x8e, 0xae, 0x4f, 0x2b, 0x71, 0x76, 0x77,
	0xeb, 0x60, 0xf6, 0x47, 0x01, 0xe4, 0x1b, 0x54, 0xdb, 0x32, 0xf1, 0x35, 0xb6, 0xe2, 0x16, 0x98,
	0xc4, 0x26, 0x66, 0x18, 0xea, 0x4d, 0xbd, 0x69, 0x12, 0x15, 0x39, 0xf7, 0x32, 0x5b, 0xca, 0x29,
	0xe3, 0x5e, 0xf8, 0xe9, 0x33, 0x27, 0x18, 0xc6, 0xb5, 0x3c, 0x5c, 0x36, 0x82, 0xdb, 0xe4, 0xb8,
	0x98, 0x86, 0x19, 0x30, 0x1d, 0x66, 0x18, 0x50, 0xff, 0xe4, 0x7e, 0x50, 0xdb, 0x9d, 0x1d, 0x03,
	0xb3, 0x97, 0x08, 0x6b, 0x6d, 0x76, 0xed, 0x83, 0x1c, 0x8a, 0x1c, 0xa4, 0xb8, 0x08, 0xc6, 0x89,
	0x8d, 0x35, 0x6c, 0x42, 0xbd, 0xd9, 0x86, 0xb4, 0xcd, 0x0f, 0x3a, 0xa7, 0xe4, 0xfd, 0xe0, 0x13,
	0x48, 0xdb, 0xe2, 0x7f, 0x20, 0xcb, 0xa0, 0x56, 0x18, 0xe6, 0x29, 0xe7, 0x6f, 0x8c, 0xbf, 0xfb,
	0x9d, 0x84, 0x69, 0x06, 0x12, 0xbe, 0x08, 0x60, 0x22, 0xc8, 0x6d, 0xb7, 0x88, 0x8d, 0x7e, 0xb7,
	0x82, 0x25, 0x30, 0xa9, 0x3b, 0x3b, 0xdd, 0x84, 0x6e, 0x69, 0xb0, 0xe5, 0x13, 0x3c, 0xbc, 0xee,
	0x47, 0xc5, 0x19, 0x30, 0x42, 0x1d, 0x02, 0xb4, 0x30, 0xcc, 0xf3, 0xde, 0x2a, 0xa6, 0xa5, 0x00,
	0x66, 0xa2, 0x7c, 0x03, 0x29, 0x1f, 0x04, 0x7e, 0x4c, 0x6e, 0xea, 0xb1, 0x4e, 0x76, 0xa0, 0xde,
	0x20, 0x2a, 0xd2, 0xff, 0xc6, 0x91, 0xc4, 0x48, 0xcb, 0xe0, 0x46, 0x12, 0x33, 0x9f, 0x7a, 0xfd,
	0x74, 0x14, 0x64, 0x1b, 0x54, 0x13, 0x2d, 0x90, 0x8f, 0xb8, 0xf3, 0x9d, 0xab, 0x5c, 0x35, 0x66,
	0x7d, 0xd2, 0xca, 0x00, 0x60, 0x7f, 0xb2, 0x78, 0x28, 0x00, 0x31, 0xc1, 0x25, 0x6b, 0x29, 0xbd,
	0xba, 0x4b, 0xa4, 0xd5, 0x81, 0x4b, 0x22, 0x24, 0x12, 0x3c, 0xb1, 0xd6, 0x97, 0xa0, 0x81, 0x48,
	0xf4, 0xf6, 0x40, 0x4e, 0x22, 0xc1, 0x01, 0xd3, 0x48, 0x74, 0x97, 0xa4, 0x92, 0xe8, 0x6d, 0x86,
	0xa2, 0x06, 0x72, 0x97, 0x46, 0x58, 0x4a, 0xe9, 0x13, 0x20, 0xa5, 0xe5, 0x7e, 0x91, 0xc1, 0x20,
	0x0b, 0xe4, 0x23, 0xb6, 0x95, 0x76, 0xd3, 0xc2, 0xe0, 0xd4, 0x9b, 0x96, 0xe4, 0x34, 0xa2, 0x01,
	0xc6, 0xc2, 0x2e, 0x53, 0xee, 0xab, 0x07, 0xc7, 0x4a, 0xf5, 0xfe, 0xb1, 0xc1, 0xb8, 0x37, 0x60,
	0xaa, 0xdb, 0x09, 0x96, 0xfb, 0x6a, 0x14, 0xaa, 0x90, 0xee, 0x0f, 0x5a, 0xe1, 0x13, 0x90, 0xfe,
	0x79, 0xeb, 0xbc, 0x74, 0x36, 0x56, 0x8f, 0xcf, 0x64, 0xe1, 0xe4, 0x4c, 0x16, 0x7e, 0x9e, 0xc9,
	0xc2, 0xfb, 0x73, 0x39, 0x73, 0x72, 0x2e, 0x67, 0x4e, 0xcf, 0xe5, 0xcc, 0xeb, 0xf9, 0xde, 0x0f,
	0x1d, 0x76, 0x60, 0x21, 0xba, 0x33, 0xc2, 0x9f, 0x6d, 0x2b, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xb1, 0x19, 0x2c, 0xd1, 0x7f, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// CreateCurrentRound defines the CreateCurrentRound RPC.
	CreateCurrentRound(ctx context.Context, in *MsgCreateCurrentRound, opts ...grpc.CallOption) (*MsgCreateCurrentRoundResponse, error)
	// UpdateCurrentRound defines the UpdateCurrentRound RPC.
	UpdateCurrentRound(ctx context.Context, in *MsgUpdateCurrentRound, opts ...grpc.CallOption) (*MsgUpdateCurrentRoundResponse, error)
	// DeleteCurrentRound defines the DeleteCurrentRound RPC.
	DeleteCurrentRound(ctx context.Context, in *MsgDeleteCurrentRound, opts ...grpc.CallOption) (*MsgDeleteCurrentRoundResponse, error)
	// InitRound defines the InitRound RPC.
	InitRound(ctx context.Context, in *MsgInitRound, opts ...grpc.CallOption) (*MsgInitRoundResponse, error)
	// SubmitWeight defines the SubmitWeight RPC.
	SubmitWeight(ctx context.Context, in *MsgSubmitWeight, opts ...grpc.CallOption) (*MsgSubmitWeightResponse, error)
	// SubmitScore defines the SubmitScore RPC.
	SubmitScore(ctx context.Context, in *MsgSubmitScore, opts ...grpc.CallOption) (*MsgSubmitScoreResponse, error)
	// SubmitGlobalModel defines the SubmitGlobalModel RPC.
	SubmitGlobalModel(ctx context.Context, in *MsgSubmitGlobalModel, opts ...grpc.CallOption) (*MsgSubmitGlobalModelResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCurrentRound(ctx context.Context, in *MsgCreateCurrentRound, opts ...grpc.CallOption) (*MsgCreateCurrentRoundResponse, error) {
	out := new(MsgCreateCurrentRoundResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Msg/CreateCurrentRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCurrentRound(ctx context.Context, in *MsgUpdateCurrentRound, opts ...grpc.CallOption) (*MsgUpdateCurrentRoundResponse, error) {
	out := new(MsgUpdateCurrentRoundResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Msg/UpdateCurrentRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteCurrentRound(ctx context.Context, in *MsgDeleteCurrentRound, opts ...grpc.CallOption) (*MsgDeleteCurrentRoundResponse, error) {
	out := new(MsgDeleteCurrentRoundResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Msg/DeleteCurrentRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitRound(ctx context.Context, in *MsgInitRound, opts ...grpc.CallOption) (*MsgInitRoundResponse, error) {
	out := new(MsgInitRoundResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Msg/InitRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitWeight(ctx context.Context, in *MsgSubmitWeight, opts ...grpc.CallOption) (*MsgSubmitWeightResponse, error) {
	out := new(MsgSubmitWeightResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Msg/SubmitWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitScore(ctx context.Context, in *MsgSubmitScore, opts ...grpc.CallOption) (*MsgSubmitScoreResponse, error) {
	out := new(MsgSubmitScoreResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Msg/SubmitScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitGlobalModel(ctx context.Context, in *MsgSubmitGlobalModel, opts ...grpc.CallOption) (*MsgSubmitGlobalModelResponse, error) {
	out := new(MsgSubmitGlobalModelResponse)
	err := c.cc.Invoke(ctx, "/flmainchain.fedlearning.v1.Msg/SubmitGlobalModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// CreateCurrentRound defines the CreateCurrentRound RPC.
	CreateCurrentRound(context.Context, *MsgCreateCurrentRound) (*MsgCreateCurrentRoundResponse, error)
	// UpdateCurrentRound defines the UpdateCurrentRound RPC.
	UpdateCurrentRound(context.Context, *MsgUpdateCurrentRound) (*MsgUpdateCurrentRoundResponse, error)
	// DeleteCurrentRound defines the DeleteCurrentRound RPC.
	DeleteCurrentRound(context.Context, *MsgDeleteCurrentRound) (*MsgDeleteCurrentRoundResponse, error)
	// InitRound defines the InitRound RPC.
	InitRound(context.Context, *MsgInitRound) (*MsgInitRoundResponse, error)
	// SubmitWeight defines the SubmitWeight RPC.
	SubmitWeight(context.Context, *MsgSubmitWeight) (*MsgSubmitWeightResponse, error)
	// SubmitScore defines the SubmitScore RPC.
	SubmitScore(context.Context, *MsgSubmitScore) (*MsgSubmitScoreResponse, error)
	// SubmitGlobalModel defines the SubmitGlobalModel RPC.
	SubmitGlobalModel(context.Context, *MsgSubmitGlobalModel) (*MsgSubmitGlobalModelResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateCurrentRound(ctx context.Context, req *MsgCreateCurrentRound) (*MsgCreateCurrentRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrentRound not implemented")
}
func (*UnimplementedMsgServer) UpdateCurrentRound(ctx context.Context, req *MsgUpdateCurrentRound) (*MsgUpdateCurrentRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrentRound not implemented")
}
func (*UnimplementedMsgServer) DeleteCurrentRound(ctx context.Context, req *MsgDeleteCurrentRound) (*MsgDeleteCurrentRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrentRound not implemented")
}
func (*UnimplementedMsgServer) InitRound(ctx context.Context, req *MsgInitRound) (*MsgInitRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitRound not implemented")
}
func (*UnimplementedMsgServer) SubmitWeight(ctx context.Context, req *MsgSubmitWeight) (*MsgSubmitWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWeight not implemented")
}
func (*UnimplementedMsgServer) SubmitScore(ctx context.Context, req *MsgSubmitScore) (*MsgSubmitScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitScore not implemented")
}
func (*UnimplementedMsgServer) SubmitGlobalModel(ctx context.Context, req *MsgSubmitGlobalModel) (*MsgSubmitGlobalModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGlobalModel not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCurrentRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCurrentRound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCurrentRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Msg/CreateCurrentRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCurrentRound(ctx, req.(*MsgCreateCurrentRound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCurrentRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCurrentRound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCurrentRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Msg/UpdateCurrentRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCurrentRound(ctx, req.(*MsgUpdateCurrentRound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteCurrentRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteCurrentRound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteCurrentRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Msg/DeleteCurrentRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteCurrentRound(ctx, req.(*MsgDeleteCurrentRound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitRound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Msg/InitRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitRound(ctx, req.(*MsgInitRound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitWeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Msg/SubmitWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitWeight(ctx, req.(*MsgSubmitWeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Msg/SubmitScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitScore(ctx, req.(*MsgSubmitScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitGlobalModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitGlobalModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitGlobalModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flmainchain.fedlearning.v1.Msg/SubmitGlobalModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitGlobalModel(ctx, req.(*MsgSubmitGlobalModel))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flmainchain.fedlearning.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateCurrentRound",
			Handler:    _Msg_CreateCurrentRound_Handler,
		},
		{
			MethodName: "UpdateCurrentRound",
			Handler:    _Msg_UpdateCurrentRound_Handler,
		},
		{
			MethodName: "DeleteCurrentRound",
			Handler:    _Msg_DeleteCurrentRound_Handler,
		},
		{
			MethodName: "InitRound",
			Handler:    _Msg_InitRound_Handler,
		},
		{
			MethodName: "SubmitWeight",
			Handler:    _Msg_SubmitWeight_Handler,
		},
		{
			MethodName: "SubmitScore",
			Handler:    _Msg_SubmitScore_Handler,
		},
		{
			MethodName: "SubmitGlobalModel",
			Handler:    _Msg_SubmitGlobalModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flmainchain/fedlearning/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateCurrentRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCurrentRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCurrentRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCurrentRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCurrentRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCurrentRoundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCurrentRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCurrentRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCurrentRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCurrentRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCurrentRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCurrentRoundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCurrentRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCurrentRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCurrentRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCurrentRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCurrentRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCurrentRoundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitialCNodes) > 0 {
		for iNdEx := len(m.InitialCNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InitialCNodes[iNdEx])
			copy(dAtA[i:], m.InitialCNodes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.InitialCNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InitialLNodes) > 0 {
		for iNdEx := len(m.InitialLNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InitialLNodes[iNdEx])
			copy(dAtA[i:], m.InitialLNodes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.InitialLNodes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitRoundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OriginalHash) > 0 {
		i -= len(m.OriginalHash)
		copy(dAtA[i:], m.OriginalHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RoundId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitWeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Scores[iNdEx])
			copy(dAtA[i:], m.Scores[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Scores[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LnodeAddresses) > 0 {
		for iNdEx := len(m.LnodeAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LnodeAddresses[iNdEx])
			copy(dAtA[i:], m.LnodeAddresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.LnodeAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RoundId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitGlobalModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitGlobalModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitGlobalModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalHash) > 0 {
		i -= len(m.OriginalHash)
		copy(dAtA[i:], m.OriginalHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RoundId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitGlobalModelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitGlobalModelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitGlobalModelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateCurrentRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovTx(uint64(m.RoundId))
	}
	return n
}

func (m *MsgCreateCurrentRoundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCurrentRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovTx(uint64(m.RoundId))
	}
	return n
}

func (m *MsgUpdateCurrentRoundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteCurrentRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteCurrentRoundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.InitialLNodes) > 0 {
		for _, s := range m.InitialLNodes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.InitialCNodes) > 0 {
		for _, s := range m.InitialCNodes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgInitRoundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovTx(uint64(m.RoundId))
	}
	l = len(m.OriginalHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitWeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovTx(uint64(m.RoundId))
	}
	if len(m.LnodeAddresses) > 0 {
		for _, s := range m.LnodeAddresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Scores) > 0 {
		for _, s := range m.Scores {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitGlobalModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovTx(uint64(m.RoundId))
	}
	l = len(m.OriginalHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitGlobalModelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCurrentRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCurrentRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCurrentRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCurrentRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCurrentRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCurrentRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCurrentRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCurrentRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCurrentRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCurrentRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCurrentRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCurrentRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCurrentRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCurrentRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCurrentRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCurrentRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCurrentRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCurrentRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialLNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialLNodes = append(m.InitialLNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialCNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialCNodes = append(m.InitialCNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitWeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LnodeAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LnodeAddresses = append(m.LnodeAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitGlobalModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitGlobalModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitGlobalModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitGlobalModelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitGlobalModelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitGlobalModelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
